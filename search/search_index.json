{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"rabbitmq Jsonnet library","text":"<p>This library is generated with <code>k8s</code>.</p> <ul> <li>1.7</li> <li>2.0</li> <li>2.1</li> </ul>"},{"location":"1.7/","title":"rabbitmq","text":"<pre><code>local rabbitmq = import \"github.com/jsonnet-libs/rabbitmq-libsonnet/1.7/main.libsonnet\"\n</code></pre> <ul> <li>rabbitmq</li> </ul>"},{"location":"1.7/rabbitmq/","title":"rabbitmq","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"1.7/rabbitmq/v1beta1/","title":"rabbitmq.v1beta1","text":"<ul> <li>rabbitmqCluster</li> </ul>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/","title":"rabbitmq.v1beta1.rabbitmqCluster","text":"<p>\"RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object corresponds to a single RabbitMQ cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withSkipPostDeploySteps(skipPostDeploySteps)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>obj spec.affinity</code><ul> <li><code>obj spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override</code><ul> <li><code>obj spec.override.service</code><ul> <li><code>obj spec.override.service.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.service.spec</code><ul> <li><code>fn withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)</code></li> <li><code>fn withClusterIP(clusterIP)</code></li> <li><code>fn withClusterIPs(clusterIPs)</code></li> <li><code>fn withClusterIPsMixin(clusterIPs)</code></li> <li><code>fn withExternalIPs(externalIPs)</code></li> <li><code>fn withExternalIPsMixin(externalIPs)</code></li> <li><code>fn withExternalName(externalName)</code></li> <li><code>fn withExternalTrafficPolicy(externalTrafficPolicy)</code></li> <li><code>fn withHealthCheckNodePort(healthCheckNodePort)</code></li> <li><code>fn withIpFamilies(ipFamilies)</code></li> <li><code>fn withIpFamiliesMixin(ipFamilies)</code></li> <li><code>fn withIpFamilyPolicy(ipFamilyPolicy)</code></li> <li><code>fn withLoadBalancerIP(loadBalancerIP)</code></li> <li><code>fn withLoadBalancerSourceRanges(loadBalancerSourceRanges)</code></li> <li><code>fn withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withPublishNotReadyAddresses(publishNotReadyAddresses)</code></li> <li><code>fn withSelector(selector)</code></li> <li><code>fn withSelectorMixin(selector)</code></li> <li><code>fn withSessionAffinity(sessionAffinity)</code></li> <li><code>fn withTopologyKeys(topologyKeys)</code></li> <li><code>fn withTopologyKeysMixin(topologyKeys)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.service.spec.ports</code><ul> <li><code>fn withAppProtocol(appProtocol)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNodePort(nodePort)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>fn withTargetPort(targetPort)</code></li> </ul> </li> <li><code>obj spec.override.service.spec.sessionAffinityConfig</code><ul> <li><code>obj spec.override.service.spec.sessionAffinityConfig.clientIP</code><ul> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet</code><ul> <li><code>obj spec.override.statefulSet.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec</code><ul> <li><code>fn withPodManagementPolicy(podManagementPolicy)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withVolumeClaimTemplates(volumeClaimTemplates)</code></li> <li><code>fn withVolumeClaimTemplatesMixin(volumeClaimTemplates)</code></li> <li><code>obj spec.override.statefulSet.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template</code><ul> <li><code>obj spec.override.statefulSet.spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec</code><ul> <li><code>fn withActiveDeadlineSeconds(activeDeadlineSeconds)</code></li> <li><code>fn withAutomountServiceAccountToken(automountServiceAccountToken)</code></li> <li><code>fn withContainers(containers)</code></li> <li><code>fn withContainersMixin(containers)</code></li> <li><code>fn withDnsPolicy(dnsPolicy)</code></li> <li><code>fn withEnableServiceLinks(enableServiceLinks)</code></li> <li><code>fn withEphemeralContainers(ephemeralContainers)</code></li> <li><code>fn withEphemeralContainersMixin(ephemeralContainers)</code></li> <li><code>fn withHostAliases(hostAliases)</code></li> <li><code>fn withHostAliasesMixin(hostAliases)</code></li> <li><code>fn withHostIPC(hostIPC)</code></li> <li><code>fn withHostNetwork(hostNetwork)</code></li> <li><code>fn withHostPID(hostPID)</code></li> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withInitContainers(initContainers)</code></li> <li><code>fn withInitContainersMixin(initContainers)</code></li> <li><code>fn withNodeName(nodeName)</code></li> <li><code>fn withNodeSelector(nodeSelector)</code></li> <li><code>fn withNodeSelectorMixin(nodeSelector)</code></li> <li><code>fn withOverhead(overhead)</code></li> <li><code>fn withOverheadMixin(overhead)</code></li> <li><code>fn withPreemptionPolicy(preemptionPolicy)</code></li> <li><code>fn withPriority(priority)</code></li> <li><code>fn withPriorityClassName(priorityClassName)</code></li> <li><code>fn withReadinessGates(readinessGates)</code></li> <li><code>fn withReadinessGatesMixin(readinessGates)</code></li> <li><code>fn withRestartPolicy(restartPolicy)</code></li> <li><code>fn withRuntimeClassName(runtimeClassName)</code></li> <li><code>fn withSchedulerName(schedulerName)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withServiceAccountName(serviceAccountName)</code></li> <li><code>fn withSetHostnameAsFQDN(setHostnameAsFQDN)</code></li> <li><code>fn withShareProcessNamespace(shareProcessNamespace)</code></li> <li><code>fn withSubdomain(subdomain)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>fn withTopologySpreadConstraints(topologySpreadConstraints)</code></li> <li><code>fn withTopologySpreadConstraintsMixin(topologySpreadConstraints)</code></li> <li><code>fn withVolumes(volumes)</code></li> <li><code>fn withVolumesMixin(volumes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig</code><ul> <li><code>fn withNameservers(nameservers)</code></li> <li><code>fn withNameserversMixin(nameservers)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withSearches(searches)</code></li> <li><code>fn withSearchesMixin(searches)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig.options</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTargetContainerName(targetContainerName)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.hostAliases</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withIp(ip)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.readinessGates</code><ul> <li><code>fn withConditionType(conditionType)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext</code><ul> <li><code>fn withFsGroup(fsGroup)</code></li> <li><code>fn withFsGroupChangePolicy(fsGroupChangePolicy)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>fn withSupplementalGroups(supplementalGroups)</code></li> <li><code>fn withSupplementalGroupsMixin(supplementalGroups)</code></li> <li><code>fn withSysctls(sysctls)</code></li> <li><code>fn withSysctlsMixin(sysctls)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints</code><ul> <li><code>fn withMaxSkew(maxSkew)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>fn withWhenUnsatisfiable(whenUnsatisfiable)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk</code><ul> <li><code>fn withCachingMode(cachingMode)</code></li> <li><code>fn withDiskName(diskName)</code></li> <li><code>fn withDiskURI(diskURI)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureFile</code><ul> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>fn withShareName(shareName)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs</code><ul> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretFile(secretFile)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeAttributes(volumeAttributes)</code></li> <li><code>fn withVolumeAttributesMixin(volumeAttributes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir</code><ul> <li><code>fn withMedium(medium)</code></li> <li><code>fn withSizeLimit(sizeLimit)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral</code><ul> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate</code><ul> <li><code>fn withMetadata(metadata)</code></li> <li><code>fn withMetadataMixin(metadata)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.fc</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetWWNs(targetWWNs)</code></li> <li><code>fn withTargetWWNsMixin(targetWWNs)</code></li> <li><code>fn withWwids(wwids)</code></li> <li><code>fn withWwidsMixin(wwids)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flocker</code><ul> <li><code>fn withDatasetName(datasetName)</code></li> <li><code>fn withDatasetUUID(datasetUUID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withPdName(pdName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo</code><ul> <li><code>fn withDirectory(directory)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRevision(revision)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs</code><ul> <li><code>fn withEndpoints(endpoints)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.hostPath</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi</code><ul> <li><code>fn withChapAuthDiscovery(chapAuthDiscovery)</code></li> <li><code>fn withChapAuthSession(chapAuthSession)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withInitiatorName(initiatorName)</code></li> <li><code>fn withIqn(iqn)</code></li> <li><code>fn withIscsiInterface(iscsiInterface)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withPortals(portals)</code></li> <li><code>fn withPortalsMixin(portals)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetPortal(targetPortal)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.nfs</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withServer(server)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim</code><ul> <li><code>fn withClaimName(claimName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPdID(pdID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withSources(sources)</code></li> <li><code>fn withSourcesMixin(sources)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken</code><ul> <li><code>fn withAudience(audience)</code></li> <li><code>fn withExpirationSeconds(expirationSeconds)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.quobyte</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withRegistry(registry)</code></li> <li><code>fn withTenant(tenant)</code></li> <li><code>fn withUser(user)</code></li> <li><code>fn withVolume(volume)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withKeyring(keyring)</code></li> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withGateway(gateway)</code></li> <li><code>fn withProtectionDomain(protectionDomain)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSslEnabled(sslEnabled)</code></li> <li><code>fn withStorageMode(storageMode)</code></li> <li><code>fn withStoragePool(storagePool)</code></li> <li><code>fn withSystem(system)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>fn withVolumeNamespace(volumeNamespace)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withStoragePolicyID(storagePolicyID)</code></li> <li><code>fn withStoragePolicyName(storagePolicyName)</code></li> <li><code>fn withVolumePath(volumePath)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.updateStrategy</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate</code><ul> <li><code>fn withPartition(partition)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.persistence</code><ul> <li><code>fn withStorage(storage)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> </ul> </li> <li><code>obj spec.rabbitmq</code><ul> <li><code>fn withAdditionalConfig(additionalConfig)</code></li> <li><code>fn withAdditionalPlugins(additionalPlugins)</code></li> <li><code>fn withAdditionalPluginsMixin(additionalPlugins)</code></li> <li><code>fn withAdvancedConfig(advancedConfig)</code></li> <li><code>fn withEnvConfig(envConfig)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.service</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.tls</code><ul> <li><code>fn withCaSecretName(caSecretName)</code></li> <li><code>fn withDisableNonTLSListeners(disableNonTLSListeners)</code></li> <li><code>fn withSecretName(secretName)</code></li> </ul> </li> <li><code>obj spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fields","title":"Fields","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of RabbitmqCluster</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired state of the RabbitmqCluster Custom Resource.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimage","title":"fn spec.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster. Must be provided together with ImagePullSecrets in order to use an image in a private registry.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecrets","title":"fn spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecretsmixin","title":"fn spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithreplicas","title":"fn spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre> <p>\"Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested. This value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes in the event of a fragmenting network partition.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithskippostdeploysteps","title":"fn spec.withSkipPostDeploySteps","text":"<pre><code>withSkipPostDeploySteps(skipPostDeploySteps)\n</code></pre> <p>\"If unset, or set to false, the cluster will run <code>rabbitmq-queues rebalance all</code> whenever the cluster is updated. Set to true to prevent the operator rebalancing queue leaders after a cluster update. Has no effect if the cluster only consists of one node. For more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithterminationgraceperiodseconds","title":"fn spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre> <p>\"TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully. It defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running. For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerations","title":"fn spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerationsmixin","title":"fn spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinity","title":"obj spec.affinity","text":"<p>\"Affinity scheduling rules to be applied on created Pods.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinity","title":"obj spec.affinity.nodeAffinity","text":"<p>\"Describes node affinity scheduling rules for the pod.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":"<p>\"A node selector term, associated with the corresponding weight.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":"<p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinity","title":"obj spec.affinity.podAffinity","text":"<p>\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinity","title":"obj spec.affinity.podAntiAffinity","text":"<p>\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means \\\"this pod's namespace\\</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specimagepullsecrets","title":"obj spec.imagePullSecrets","text":"<p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specimagepullsecretswithname","title":"fn spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverride","title":"obj spec.override","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservice","title":"obj spec.override.service","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicemetadata","title":"obj spec.override.service.metadata","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotations","title":"fn spec.override.service.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotationsmixin","title":"fn spec.override.service.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabels","title":"fn spec.override.service.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabelsmixin","title":"fn spec.override.service.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespec","title":"obj spec.override.service.spec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithallocateloadbalancernodeports","title":"fn spec.override.service.spec.withAllocateLoadBalancerNodePorts","text":"<pre><code>withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterip","title":"fn spec.override.service.spec.withClusterIP","text":"<pre><code>withClusterIP(clusterIP)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterips","title":"fn spec.override.service.spec.withClusterIPs","text":"<pre><code>withClusterIPs(clusterIPs)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusteripsmixin","title":"fn spec.override.service.spec.withClusterIPsMixin","text":"<pre><code>withClusterIPsMixin(clusterIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalips","title":"fn spec.override.service.spec.withExternalIPs","text":"<pre><code>withExternalIPs(externalIPs)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalipsmixin","title":"fn spec.override.service.spec.withExternalIPsMixin","text":"<pre><code>withExternalIPsMixin(externalIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalname","title":"fn spec.override.service.spec.withExternalName","text":"<pre><code>withExternalName(externalName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternaltrafficpolicy","title":"fn spec.override.service.spec.withExternalTrafficPolicy","text":"<pre><code>withExternalTrafficPolicy(externalTrafficPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithhealthchecknodeport","title":"fn spec.override.service.spec.withHealthCheckNodePort","text":"<pre><code>withHealthCheckNodePort(healthCheckNodePort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilies","title":"fn spec.override.service.spec.withIpFamilies","text":"<pre><code>withIpFamilies(ipFamilies)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamiliesmixin","title":"fn spec.override.service.spec.withIpFamiliesMixin","text":"<pre><code>withIpFamiliesMixin(ipFamilies)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilypolicy","title":"fn spec.override.service.spec.withIpFamilyPolicy","text":"<pre><code>withIpFamilyPolicy(ipFamilyPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancerip","title":"fn spec.override.service.spec.withLoadBalancerIP","text":"<pre><code>withLoadBalancerIP(loadBalancerIP)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourceranges","title":"fn spec.override.service.spec.withLoadBalancerSourceRanges","text":"<pre><code>withLoadBalancerSourceRanges(loadBalancerSourceRanges)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourcerangesmixin","title":"fn spec.override.service.spec.withLoadBalancerSourceRangesMixin","text":"<pre><code>withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithports","title":"fn spec.override.service.spec.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithportsmixin","title":"fn spec.override.service.spec.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithpublishnotreadyaddresses","title":"fn spec.override.service.spec.withPublishNotReadyAddresses","text":"<pre><code>withPublishNotReadyAddresses(publishNotReadyAddresses)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselector","title":"fn spec.override.service.spec.withSelector","text":"<pre><code>withSelector(selector)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselectormixin","title":"fn spec.override.service.spec.withSelectorMixin","text":"<pre><code>withSelectorMixin(selector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithsessionaffinity","title":"fn spec.override.service.spec.withSessionAffinity","text":"<pre><code>withSessionAffinity(sessionAffinity)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithtopologykeys","title":"fn spec.override.service.spec.withTopologyKeys","text":"<pre><code>withTopologyKeys(topologyKeys)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithtopologykeysmixin","title":"fn spec.override.service.spec.withTopologyKeysMixin","text":"<pre><code>withTopologyKeysMixin(topologyKeys)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithtype","title":"fn spec.override.service.spec.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecports","title":"obj spec.override.service.spec.ports","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithappprotocol","title":"fn spec.override.service.spec.ports.withAppProtocol","text":"<pre><code>withAppProtocol(appProtocol)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithname","title":"fn spec.override.service.spec.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithnodeport","title":"fn spec.override.service.spec.ports.withNodePort","text":"<pre><code>withNodePort(nodePort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithport","title":"fn spec.override.service.spec.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithprotocol","title":"fn spec.override.service.spec.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithtargetport","title":"fn spec.override.service.spec.ports.withTargetPort","text":"<pre><code>withTargetPort(targetPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfig","title":"obj spec.override.service.spec.sessionAffinityConfig","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfigclientip","title":"obj spec.override.service.spec.sessionAffinityConfig.clientIP","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecsessionaffinityconfigclientipwithtimeoutseconds","title":"fn spec.override.service.spec.sessionAffinityConfig.clientIP.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulset","title":"obj spec.override.statefulSet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetmetadata","title":"obj spec.override.statefulSet.metadata","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotations","title":"fn spec.override.statefulSet.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabels","title":"fn spec.override.statefulSet.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspec","title":"obj spec.override.statefulSet.spec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithpodmanagementpolicy","title":"fn spec.override.statefulSet.spec.withPodManagementPolicy","text":"<pre><code>withPodManagementPolicy(podManagementPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithreplicas","title":"fn spec.override.statefulSet.spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithservicename","title":"fn spec.override.statefulSet.spec.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplates","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplates","text":"<pre><code>withVolumeClaimTemplates(volumeClaimTemplates)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplatesmixin","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplatesMixin","text":"<pre><code>withVolumeClaimTemplatesMixin(volumeClaimTemplates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselector","title":"obj spec.override.statefulSet.spec.selector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.selector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplate","title":"obj spec.override.statefulSet.spec.template","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatemetadata","title":"obj spec.override.statefulSet.spec.template.metadata","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotations","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabels","title":"fn spec.override.statefulSet.spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithname","title":"fn spec.override.statefulSet.spec.template.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithnamespace","title":"fn spec.override.statefulSet.spec.template.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespec","title":"obj spec.override.statefulSet.spec.template.spec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithactivedeadlineseconds","title":"fn spec.override.statefulSet.spec.template.spec.withActiveDeadlineSeconds","text":"<pre><code>withActiveDeadlineSeconds(activeDeadlineSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithautomountserviceaccounttoken","title":"fn spec.override.statefulSet.spec.template.spec.withAutomountServiceAccountToken","text":"<pre><code>withAutomountServiceAccountToken(automountServiceAccountToken)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withContainers","text":"<pre><code>withContainers(containers)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withContainersMixin","text":"<pre><code>withContainersMixin(containers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithdnspolicy","title":"fn spec.override.statefulSet.spec.template.spec.withDnsPolicy","text":"<pre><code>withDnsPolicy(dnsPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithenableservicelinks","title":"fn spec.override.statefulSet.spec.template.spec.withEnableServiceLinks","text":"<pre><code>withEnableServiceLinks(enableServiceLinks)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainers","text":"<pre><code>withEphemeralContainers(ephemeralContainers)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainersMixin","text":"<pre><code>withEphemeralContainersMixin(ephemeralContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliases","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliases","text":"<pre><code>withHostAliases(hostAliases)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliasesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliasesMixin","text":"<pre><code>withHostAliasesMixin(hostAliases)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostipc","title":"fn spec.override.statefulSet.spec.template.spec.withHostIPC","text":"<pre><code>withHostIPC(hostIPC)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostnetwork","title":"fn spec.override.statefulSet.spec.template.spec.withHostNetwork","text":"<pre><code>withHostNetwork(hostNetwork)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostpid","title":"fn spec.override.statefulSet.spec.template.spec.withHostPID","text":"<pre><code>withHostPID(hostPID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostname","title":"fn spec.override.statefulSet.spec.template.spec.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecrets","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecretsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainers","text":"<pre><code>withInitContainers(initContainers)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainersMixin","text":"<pre><code>withInitContainersMixin(initContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodename","title":"fn spec.override.statefulSet.spec.template.spec.withNodeName","text":"<pre><code>withNodeName(nodeName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselector","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelector","text":"<pre><code>withNodeSelector(nodeSelector)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselectormixin","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelectorMixin","text":"<pre><code>withNodeSelectorMixin(nodeSelector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverhead","title":"fn spec.override.statefulSet.spec.template.spec.withOverhead","text":"<pre><code>withOverhead(overhead)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverheadmixin","title":"fn spec.override.statefulSet.spec.template.spec.withOverheadMixin","text":"<pre><code>withOverheadMixin(overhead)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpreemptionpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withPreemptionPolicy","text":"<pre><code>withPreemptionPolicy(preemptionPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriority","title":"fn spec.override.statefulSet.spec.template.spec.withPriority","text":"<pre><code>withPriority(priority)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriorityclassname","title":"fn spec.override.statefulSet.spec.template.spec.withPriorityClassName","text":"<pre><code>withPriorityClassName(priorityClassName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgates","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGates","text":"<pre><code>withReadinessGates(readinessGates)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgatesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGatesMixin","text":"<pre><code>withReadinessGatesMixin(readinessGates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithrestartpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withRestartPolicy","text":"<pre><code>withRestartPolicy(restartPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithruntimeclassname","title":"fn spec.override.statefulSet.spec.template.spec.withRuntimeClassName","text":"<pre><code>withRuntimeClassName(runtimeClassName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithschedulername","title":"fn spec.override.statefulSet.spec.template.spec.withSchedulerName","text":"<pre><code>withSchedulerName(schedulerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccount","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccountname","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccountName","text":"<pre><code>withServiceAccountName(serviceAccountName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsethostnameasfqdn","title":"fn spec.override.statefulSet.spec.template.spec.withSetHostnameAsFQDN","text":"<pre><code>withSetHostnameAsFQDN(setHostnameAsFQDN)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithshareprocessnamespace","title":"fn spec.override.statefulSet.spec.template.spec.withShareProcessNamespace","text":"<pre><code>withShareProcessNamespace(shareProcessNamespace)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsubdomain","title":"fn spec.override.statefulSet.spec.template.spec.withSubdomain","text":"<pre><code>withSubdomain(subdomain)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerations","title":"fn spec.override.statefulSet.spec.template.spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerationsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraints","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraints","text":"<pre><code>withTopologySpreadConstraints(topologySpreadConstraints)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraintsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraintsMixin","text":"<pre><code>withTopologySpreadConstraintsMixin(topologySpreadConstraints)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumes","title":"fn spec.override.statefulSet.spec.template.spec.withVolumes","text":"<pre><code>withVolumes(volumes)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withVolumesMixin","text":"<pre><code>withVolumesMixin(volumes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainers","title":"obj spec.override.statefulSet.spec.template.spec.containers","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.containers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.containers.env","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersports","title":"obj spec.override.statefulSet.spec.template.spec.containers.ports","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.containers.resources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfig","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameservers","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameservers","text":"<pre><code>withNameservers(nameservers)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameserversmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameserversMixin","text":"<pre><code>withNameserversMixin(nameservers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptions","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearches","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearches","text":"<pre><code>withSearches(searches)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearchesmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearchesMixin","text":"<pre><code>withSearchesMixin(searches)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfigoptions","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig.options","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithname","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainers","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtargetcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTargetContainerName","text":"<pre><code>withTargetContainerName(targetContainerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespechostaliases","title":"obj spec.override.statefulSet.spec.template.spec.hostAliases","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnames","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnamesmixin","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithip","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withIp","text":"<pre><code>withIp(ip)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecimagepullsecrets","title":"obj spec.override.statefulSet.spec.template.spec.imagePullSecrets","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecimagepullsecretswithname","title":"fn spec.override.statefulSet.spec.template.spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainers","title":"obj spec.override.statefulSet.spec.template.spec.initContainers","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.ports","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.resources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecreadinessgates","title":"obj spec.override.statefulSet.spec.template.spec.readinessGates","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecreadinessgateswithconditiontype","title":"fn spec.override.statefulSet.spec.template.spec.readinessGates.withConditionType","text":"<pre><code>withConditionType(conditionType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.securityContext","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroup","text":"<pre><code>withFsGroup(fsGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroupchangepolicy","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroupChangePolicy","text":"<pre><code>withFsGroupChangePolicy(fsGroupChangePolicy)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroups","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroups","text":"<pre><code>withSupplementalGroups(supplementalGroups)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroupsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroupsMixin","text":"<pre><code>withSupplementalGroupsMixin(supplementalGroups)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctls","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctls","text":"<pre><code>withSysctls(sysctls)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctlsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctlsMixin","text":"<pre><code>withSysctlsMixin(sysctls)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextsysctls","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectolerations","title":"obj spec.override.statefulSet.spec.template.spec.tolerations","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswitheffect","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithkey","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithtolerationseconds","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraints","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmaxskew","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMaxSkew","text":"<pre><code>withMaxSkew(maxSkew)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithwhenunsatisfiable","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withWhenUnsatisfiable","text":"<pre><code>withWhenUnsatisfiable(whenUnsatisfiable)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselector","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumes","title":"obj spec.override.statefulSet.spec.template.spec.volumes","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeswithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesawselasticblockstore","title":"obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazuredisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithcachingmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withCachingMode","text":"<pre><code>withCachingMode(cachingMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskName","text":"<pre><code>withDiskName(diskName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskuri","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskURI","text":"<pre><code>withDiskURI(diskURI)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazurefile","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureFile","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsharename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withShareName","text":"<pre><code>withShareName(shareName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithsecretfile","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withSecretFile","text":"<pre><code>withSecretFile(secretFile)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfssecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfssecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescinder","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescindersecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescindersecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributes","text":"<pre><code>withVolumeAttributes(volumeAttributes)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributesMixin","text":"<pre><code>withVolumeAttributesMixin(volumeAttributes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesemptydir","title":"obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithmedium","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withMedium","text":"<pre><code>withMedium(medium)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithsizelimit","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withSizeLimit","text":"<pre><code>withSizeLimit(sizeLimit)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeral","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplate","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadata","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadata","text":"<pre><code>withMetadata(metadata)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadatamixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadataMixin","text":"<pre><code>withMetadataMixin(metadata)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespec","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithstorageclassname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasource","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselector","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesfc","title":"obj spec.override.statefulSet.spec.template.spec.volumes.fc","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwns","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNs","text":"<pre><code>withTargetWWNs(targetWWNs)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwnsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNsMixin","text":"<pre><code>withTargetWWNsMixin(targetWWNs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwids","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwids","text":"<pre><code>withWwids(wwids)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwidsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwidsMixin","text":"<pre><code>withWwidsMixin(wwids)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflocker","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flocker","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetName","text":"<pre><code>withDatasetName(datasetName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetuuid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetUUID","text":"<pre><code>withDatasetUUID(datasetUUID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgcepersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpdname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPdName","text":"<pre><code>withPdName(pdName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgitrepo","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithdirectory","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withDirectory","text":"<pre><code>withDirectory(directory)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrepository","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrevision","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRevision","text":"<pre><code>withRevision(revision)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesglusterfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithendpoints","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withEndpoints","text":"<pre><code>withEndpoints(endpoints)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumeshostpath","title":"obj spec.override.statefulSet.spec.template.spec.volumes.hostPath","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithtype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthdiscovery","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthDiscovery","text":"<pre><code>withChapAuthDiscovery(chapAuthDiscovery)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthsession","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthSession","text":"<pre><code>withChapAuthSession(chapAuthSession)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithinitiatorname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withInitiatorName","text":"<pre><code>withInitiatorName(initiatorName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiqn","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIqn","text":"<pre><code>withIqn(iqn)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiscsiinterface","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIscsiInterface","text":"<pre><code>withIscsiInterface(iscsiInterface)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportals","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortals","text":"<pre><code>withPortals(portals)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportalsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortalsMixin","text":"<pre><code>withPortalsMixin(portals)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithtargetportal","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withTargetPortal","text":"<pre><code>withTargetPortal(targetPortal)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsisecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsisecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesnfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.nfs","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithserver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withServer","text":"<pre><code>withServer(server)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaim","title":"obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithclaimname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withClaimName","text":"<pre><code>withClaimName(claimName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithpdid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withPdID","text":"<pre><code>withPdID(pdID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesportworxvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojected","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsources","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSources","text":"<pre><code>withSources(sources)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsourcesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSourcesMixin","text":"<pre><code>withSourcesMixin(sources)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttoken","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithaudience","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withAudience","text":"<pre><code>withAudience(audience)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithexpirationseconds","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withExpirationSeconds","text":"<pre><code>withExpirationSeconds(expirationSeconds)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesquobyte","title":"obj spec.override.statefulSet.spec.template.spec.volumes.quobyte","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithgroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithregistry","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withRegistry","text":"<pre><code>withRegistry(registry)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithtenant","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withTenant","text":"<pre><code>withTenant(tenant)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithvolume","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withVolume","text":"<pre><code>withVolume(volume)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbd","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithimage","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithkeyring","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withKeyring","text":"<pre><code>withKeyring(keyring)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithpool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withPool","text":"<pre><code>withPool(pool)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbdsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleio","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithgateway","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withGateway","text":"<pre><code>withGateway(gateway)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithprotectiondomain","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withProtectionDomain","text":"<pre><code>withProtectionDomain(protectionDomain)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsslenabled","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSslEnabled","text":"<pre><code>withSslEnabled(sslEnabled)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStorageMode","text":"<pre><code>withStorageMode(storageMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragepool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStoragePool","text":"<pre><code>withStoragePool(storagePool)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsystem","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSystem","text":"<pre><code>withSystem(system)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleiosecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiosecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret.items","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageos","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumenamespace","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeNamespace","text":"<pre><code>withVolumeNamespace(volumeNamespace)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageossecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageossecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesvspherevolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyID","text":"<pre><code>withStoragePolicyID(storagePolicyID)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyName","text":"<pre><code>withStoragePolicyName(storagePolicyName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithvolumepath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withVolumePath","text":"<pre><code>withVolumePath(volumePath)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategy","title":"obj spec.override.statefulSet.spec.updateStrategy","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategywithtype","title":"fn spec.override.statefulSet.spec.updateStrategy.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategyrollingupdate","title":"obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategyrollingupdatewithpartition","title":"fn spec.override.statefulSet.spec.updateStrategy.rollingUpdate.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplates","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithapiversion","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesmetadata","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotations","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithnamespace","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspec","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodes","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithstorageclassname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumemode","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumename","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasource","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecresources","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimits","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequests","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselector","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions","text":""},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specpersistence","title":"obj spec.persistence","text":"<p>\"The desired persistent storage configuration for each Pod in the cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorage","title":"fn spec.persistence.withStorage","text":"<pre><code>withStorage(storage)\n</code></pre> <p>\"The requested size of the persistent volume attached to each Pod in the RabbitmqCluster. The format of this field matches that defined by kubernetes/apimachinery. See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorageclassname","title":"fn spec.persistence.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre> <p>\"The name of the StorageClass to claim a PersistentVolume from.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specrabbitmq","title":"obj spec.rabbitmq","text":"<p>\"Configuration options for RabbitMQ Pods created in the cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalconfig","title":"fn spec.rabbitmq.withAdditionalConfig","text":"<pre><code>withAdditionalConfig(additionalConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on this config, see https://www.rabbitmq.com/configure.html#config-file\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalplugins","title":"fn spec.rabbitmq.withAdditionalPlugins","text":"<pre><code>withAdditionalPlugins(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalpluginsmixin","title":"fn spec.rabbitmq.withAdditionalPluginsMixin","text":"<pre><code>withAdditionalPluginsMixin(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadvancedconfig","title":"fn spec.rabbitmq.withAdvancedConfig","text":"<pre><code>withAdvancedConfig(advancedConfig)\n</code></pre> <p>\"Specify any rabbitmq advanced.config configurations to apply to the cluster. For more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithenvconfig","title":"fn spec.rabbitmq.withEnvConfig","text":"<pre><code>withEnvConfig(envConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specresources","title":"obj spec.resources","text":"<p>\"The desired compute resource requirements of Pods in the cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimits","title":"fn spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimitsmixin","title":"fn spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-specservice","title":"obj spec.service","text":"<p>\"The desired state of the Kubernetes Service to create for the cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotations","title":"fn spec.service.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotationsmixin","title":"fn spec.service.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithtype","title":"fn spec.service.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort. For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectls","title":"obj spec.tls","text":"<p>\"TLS-related configuration for the RabbitMQ cluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithcasecretname","title":"fn spec.tls.withCaSecretName","text":"<pre><code>withCaSecretName(caSecretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS. The Secret must store this as ca.crt. This Secret can be created by running <code>kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert</code> Used for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithdisablenontlslisteners","title":"fn spec.tls.withDisableNonTLSListeners","text":"<pre><code>withDisableNonTLSListeners(disableNonTLSListeners)\n</code></pre> <p>\"When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt. Only TLS-enabled clients will be able to connect.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithsecretname","title":"fn spec.tls.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key &amp; public certificate for TLS. The Secret must store these as tls.key and tls.crt, respectively. This Secret can be created by running <code>kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</code>\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectolerations","title":"obj spec.tolerations","text":"<p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswitheffect","title":"fn spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithkey","title":"fn spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithoperator","title":"fn spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithtolerationseconds","title":"fn spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre> <p>\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\"</p>"},{"location":"1.7/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithvalue","title":"fn spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\"</p>"},{"location":"2.0/","title":"rabbitmq","text":"<pre><code>local rabbitmq = import \"github.com/jsonnet-libs/rabbitmq-libsonnet/2.0/main.libsonnet\"\n</code></pre> <ul> <li>rabbitmq</li> </ul>"},{"location":"2.0/rabbitmq/","title":"rabbitmq","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"2.0/rabbitmq/v1beta1/","title":"rabbitmq.v1beta1","text":"<ul> <li>rabbitmqCluster</li> </ul>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/","title":"rabbitmq.v1beta1.rabbitmqCluster","text":"<p>\"RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object corresponds to a single RabbitMQ cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withSkipPostDeploySteps(skipPostDeploySteps)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>obj spec.affinity</code><ul> <li><code>obj spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override</code><ul> <li><code>obj spec.override.service</code><ul> <li><code>obj spec.override.service.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.service.spec</code><ul> <li><code>fn withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)</code></li> <li><code>fn withClusterIP(clusterIP)</code></li> <li><code>fn withClusterIPs(clusterIPs)</code></li> <li><code>fn withClusterIPsMixin(clusterIPs)</code></li> <li><code>fn withExternalIPs(externalIPs)</code></li> <li><code>fn withExternalIPsMixin(externalIPs)</code></li> <li><code>fn withExternalName(externalName)</code></li> <li><code>fn withExternalTrafficPolicy(externalTrafficPolicy)</code></li> <li><code>fn withHealthCheckNodePort(healthCheckNodePort)</code></li> <li><code>fn withInternalTrafficPolicy(internalTrafficPolicy)</code></li> <li><code>fn withIpFamilies(ipFamilies)</code></li> <li><code>fn withIpFamiliesMixin(ipFamilies)</code></li> <li><code>fn withIpFamilyPolicy(ipFamilyPolicy)</code></li> <li><code>fn withLoadBalancerClass(loadBalancerClass)</code></li> <li><code>fn withLoadBalancerIP(loadBalancerIP)</code></li> <li><code>fn withLoadBalancerSourceRanges(loadBalancerSourceRanges)</code></li> <li><code>fn withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withPublishNotReadyAddresses(publishNotReadyAddresses)</code></li> <li><code>fn withSelector(selector)</code></li> <li><code>fn withSelectorMixin(selector)</code></li> <li><code>fn withSessionAffinity(sessionAffinity)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.service.spec.ports</code><ul> <li><code>fn withAppProtocol(appProtocol)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNodePort(nodePort)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>fn withTargetPort(targetPort)</code></li> </ul> </li> <li><code>obj spec.override.service.spec.sessionAffinityConfig</code><ul> <li><code>obj spec.override.service.spec.sessionAffinityConfig.clientIP</code><ul> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet</code><ul> <li><code>obj spec.override.statefulSet.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec</code><ul> <li><code>fn withPodManagementPolicy(podManagementPolicy)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withVolumeClaimTemplates(volumeClaimTemplates)</code></li> <li><code>fn withVolumeClaimTemplatesMixin(volumeClaimTemplates)</code></li> <li><code>obj spec.override.statefulSet.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template</code><ul> <li><code>obj spec.override.statefulSet.spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec</code><ul> <li><code>fn withActiveDeadlineSeconds(activeDeadlineSeconds)</code></li> <li><code>fn withAutomountServiceAccountToken(automountServiceAccountToken)</code></li> <li><code>fn withContainers(containers)</code></li> <li><code>fn withContainersMixin(containers)</code></li> <li><code>fn withDnsPolicy(dnsPolicy)</code></li> <li><code>fn withEnableServiceLinks(enableServiceLinks)</code></li> <li><code>fn withEphemeralContainers(ephemeralContainers)</code></li> <li><code>fn withEphemeralContainersMixin(ephemeralContainers)</code></li> <li><code>fn withHostAliases(hostAliases)</code></li> <li><code>fn withHostAliasesMixin(hostAliases)</code></li> <li><code>fn withHostIPC(hostIPC)</code></li> <li><code>fn withHostNetwork(hostNetwork)</code></li> <li><code>fn withHostPID(hostPID)</code></li> <li><code>fn withHostUsers(hostUsers)</code></li> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withInitContainers(initContainers)</code></li> <li><code>fn withInitContainersMixin(initContainers)</code></li> <li><code>fn withNodeName(nodeName)</code></li> <li><code>fn withNodeSelector(nodeSelector)</code></li> <li><code>fn withNodeSelectorMixin(nodeSelector)</code></li> <li><code>fn withOverhead(overhead)</code></li> <li><code>fn withOverheadMixin(overhead)</code></li> <li><code>fn withPreemptionPolicy(preemptionPolicy)</code></li> <li><code>fn withPriority(priority)</code></li> <li><code>fn withPriorityClassName(priorityClassName)</code></li> <li><code>fn withReadinessGates(readinessGates)</code></li> <li><code>fn withReadinessGatesMixin(readinessGates)</code></li> <li><code>fn withRestartPolicy(restartPolicy)</code></li> <li><code>fn withRuntimeClassName(runtimeClassName)</code></li> <li><code>fn withSchedulerName(schedulerName)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withServiceAccountName(serviceAccountName)</code></li> <li><code>fn withSetHostnameAsFQDN(setHostnameAsFQDN)</code></li> <li><code>fn withShareProcessNamespace(shareProcessNamespace)</code></li> <li><code>fn withSubdomain(subdomain)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>fn withTopologySpreadConstraints(topologySpreadConstraints)</code></li> <li><code>fn withTopologySpreadConstraintsMixin(topologySpreadConstraints)</code></li> <li><code>fn withVolumes(volumes)</code></li> <li><code>fn withVolumesMixin(volumes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig</code><ul> <li><code>fn withNameservers(nameservers)</code></li> <li><code>fn withNameserversMixin(nameservers)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withSearches(searches)</code></li> <li><code>fn withSearchesMixin(searches)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig.options</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTargetContainerName(targetContainerName)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.hostAliases</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withIp(ip)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.os</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.readinessGates</code><ul> <li><code>fn withConditionType(conditionType)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext</code><ul> <li><code>fn withFsGroup(fsGroup)</code></li> <li><code>fn withFsGroupChangePolicy(fsGroupChangePolicy)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>fn withSupplementalGroups(supplementalGroups)</code></li> <li><code>fn withSupplementalGroupsMixin(supplementalGroups)</code></li> <li><code>fn withSysctls(sysctls)</code></li> <li><code>fn withSysctlsMixin(sysctls)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints</code><ul> <li><code>fn withMatchLabelKeys(matchLabelKeys)</code></li> <li><code>fn withMatchLabelKeysMixin(matchLabelKeys)</code></li> <li><code>fn withMaxSkew(maxSkew)</code></li> <li><code>fn withMinDomains(minDomains)</code></li> <li><code>fn withNodeAffinityPolicy(nodeAffinityPolicy)</code></li> <li><code>fn withNodeTaintsPolicy(nodeTaintsPolicy)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>fn withWhenUnsatisfiable(whenUnsatisfiable)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk</code><ul> <li><code>fn withCachingMode(cachingMode)</code></li> <li><code>fn withDiskName(diskName)</code></li> <li><code>fn withDiskURI(diskURI)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureFile</code><ul> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>fn withShareName(shareName)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs</code><ul> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretFile(secretFile)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeAttributes(volumeAttributes)</code></li> <li><code>fn withVolumeAttributesMixin(volumeAttributes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir</code><ul> <li><code>fn withMedium(medium)</code></li> <li><code>fn withSizeLimit(sizeLimit)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate</code><ul> <li><code>fn withMetadata(metadata)</code></li> <li><code>fn withMetadataMixin(metadata)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.fc</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetWWNs(targetWWNs)</code></li> <li><code>fn withTargetWWNsMixin(targetWWNs)</code></li> <li><code>fn withWwids(wwids)</code></li> <li><code>fn withWwidsMixin(wwids)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flocker</code><ul> <li><code>fn withDatasetName(datasetName)</code></li> <li><code>fn withDatasetUUID(datasetUUID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withPdName(pdName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo</code><ul> <li><code>fn withDirectory(directory)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRevision(revision)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs</code><ul> <li><code>fn withEndpoints(endpoints)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.hostPath</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi</code><ul> <li><code>fn withChapAuthDiscovery(chapAuthDiscovery)</code></li> <li><code>fn withChapAuthSession(chapAuthSession)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withInitiatorName(initiatorName)</code></li> <li><code>fn withIqn(iqn)</code></li> <li><code>fn withIscsiInterface(iscsiInterface)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withPortals(portals)</code></li> <li><code>fn withPortalsMixin(portals)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetPortal(targetPortal)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.nfs</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withServer(server)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim</code><ul> <li><code>fn withClaimName(claimName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPdID(pdID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withSources(sources)</code></li> <li><code>fn withSourcesMixin(sources)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken</code><ul> <li><code>fn withAudience(audience)</code></li> <li><code>fn withExpirationSeconds(expirationSeconds)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.quobyte</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withRegistry(registry)</code></li> <li><code>fn withTenant(tenant)</code></li> <li><code>fn withUser(user)</code></li> <li><code>fn withVolume(volume)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withKeyring(keyring)</code></li> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withGateway(gateway)</code></li> <li><code>fn withProtectionDomain(protectionDomain)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSslEnabled(sslEnabled)</code></li> <li><code>fn withStorageMode(storageMode)</code></li> <li><code>fn withStoragePool(storagePool)</code></li> <li><code>fn withSystem(system)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>fn withVolumeNamespace(volumeNamespace)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withStoragePolicyID(storagePolicyID)</code></li> <li><code>fn withStoragePolicyName(storagePolicyName)</code></li> <li><code>fn withVolumePath(volumePath)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.updateStrategy</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate</code><ul> <li><code>fn withMaxUnavailable(maxUnavailable)</code></li> <li><code>fn withPartition(partition)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.persistence</code><ul> <li><code>fn withStorage(storage)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> </ul> </li> <li><code>obj spec.rabbitmq</code><ul> <li><code>fn withAdditionalConfig(additionalConfig)</code></li> <li><code>fn withAdditionalPlugins(additionalPlugins)</code></li> <li><code>fn withAdditionalPluginsMixin(additionalPlugins)</code></li> <li><code>fn withAdvancedConfig(advancedConfig)</code></li> <li><code>fn withEnvConfig(envConfig)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.secretBackend</code><ul> <li><code>obj spec.secretBackend.vault</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withDefaultUserPath(defaultUserPath)</code></li> <li><code>fn withDefaultUserUpdaterImage(defaultUserUpdaterImage)</code></li> <li><code>fn withRole(role)</code></li> <li><code>obj spec.secretBackend.vault.tls</code><ul> <li><code>fn withAltNames(altNames)</code></li> <li><code>fn withCommonName(commonName)</code></li> <li><code>fn withIpSans(ipSans)</code></li> <li><code>fn withPkiIssuerPath(pkiIssuerPath)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.service</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.tls</code><ul> <li><code>fn withCaSecretName(caSecretName)</code></li> <li><code>fn withDisableNonTLSListeners(disableNonTLSListeners)</code></li> <li><code>fn withSecretName(secretName)</code></li> </ul> </li> <li><code>obj spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fields","title":"Fields","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of RabbitmqCluster</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired state of the RabbitmqCluster Custom Resource.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimage","title":"fn spec.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster. Must be provided together with ImagePullSecrets in order to use an image in a private registry.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecrets","title":"fn spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecretsmixin","title":"fn spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithreplicas","title":"fn spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre> <p>\"Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested. This value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes in the event of a fragmenting network partition.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithskippostdeploysteps","title":"fn spec.withSkipPostDeploySteps","text":"<pre><code>withSkipPostDeploySteps(skipPostDeploySteps)\n</code></pre> <p>\"If unset, or set to false, the cluster will run <code>rabbitmq-queues rebalance all</code> whenever the cluster is updated. Set to true to prevent the operator rebalancing queue leaders after a cluster update. Has no effect if the cluster only consists of one node. For more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithterminationgraceperiodseconds","title":"fn spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre> <p>\"TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully. It defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running. For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerations","title":"fn spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerationsmixin","title":"fn spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinity","title":"obj spec.affinity","text":"<p>\"Affinity scheduling rules to be applied on created Pods.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinity","title":"obj spec.affinity.nodeAffinity","text":"<p>\"Describes node affinity scheduling rules for the pod.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":"<p>\"A node selector term, associated with the corresponding weight.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":"<p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinity","title":"obj spec.affinity.podAffinity","text":"<p>\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinity","title":"obj spec.affinity.podAntiAffinity","text":"<p>\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specimagepullsecrets","title":"obj spec.imagePullSecrets","text":"<p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specimagepullsecretswithname","title":"fn spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverride","title":"obj spec.override","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservice","title":"obj spec.override.service","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicemetadata","title":"obj spec.override.service.metadata","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotations","title":"fn spec.override.service.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotationsmixin","title":"fn spec.override.service.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabels","title":"fn spec.override.service.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabelsmixin","title":"fn spec.override.service.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespec","title":"obj spec.override.service.spec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithallocateloadbalancernodeports","title":"fn spec.override.service.spec.withAllocateLoadBalancerNodePorts","text":"<pre><code>withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterip","title":"fn spec.override.service.spec.withClusterIP","text":"<pre><code>withClusterIP(clusterIP)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterips","title":"fn spec.override.service.spec.withClusterIPs","text":"<pre><code>withClusterIPs(clusterIPs)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusteripsmixin","title":"fn spec.override.service.spec.withClusterIPsMixin","text":"<pre><code>withClusterIPsMixin(clusterIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalips","title":"fn spec.override.service.spec.withExternalIPs","text":"<pre><code>withExternalIPs(externalIPs)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalipsmixin","title":"fn spec.override.service.spec.withExternalIPsMixin","text":"<pre><code>withExternalIPsMixin(externalIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalname","title":"fn spec.override.service.spec.withExternalName","text":"<pre><code>withExternalName(externalName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternaltrafficpolicy","title":"fn spec.override.service.spec.withExternalTrafficPolicy","text":"<pre><code>withExternalTrafficPolicy(externalTrafficPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithhealthchecknodeport","title":"fn spec.override.service.spec.withHealthCheckNodePort","text":"<pre><code>withHealthCheckNodePort(healthCheckNodePort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithinternaltrafficpolicy","title":"fn spec.override.service.spec.withInternalTrafficPolicy","text":"<pre><code>withInternalTrafficPolicy(internalTrafficPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilies","title":"fn spec.override.service.spec.withIpFamilies","text":"<pre><code>withIpFamilies(ipFamilies)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamiliesmixin","title":"fn spec.override.service.spec.withIpFamiliesMixin","text":"<pre><code>withIpFamiliesMixin(ipFamilies)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilypolicy","title":"fn spec.override.service.spec.withIpFamilyPolicy","text":"<pre><code>withIpFamilyPolicy(ipFamilyPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancerclass","title":"fn spec.override.service.spec.withLoadBalancerClass","text":"<pre><code>withLoadBalancerClass(loadBalancerClass)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancerip","title":"fn spec.override.service.spec.withLoadBalancerIP","text":"<pre><code>withLoadBalancerIP(loadBalancerIP)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourceranges","title":"fn spec.override.service.spec.withLoadBalancerSourceRanges","text":"<pre><code>withLoadBalancerSourceRanges(loadBalancerSourceRanges)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourcerangesmixin","title":"fn spec.override.service.spec.withLoadBalancerSourceRangesMixin","text":"<pre><code>withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithports","title":"fn spec.override.service.spec.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithportsmixin","title":"fn spec.override.service.spec.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithpublishnotreadyaddresses","title":"fn spec.override.service.spec.withPublishNotReadyAddresses","text":"<pre><code>withPublishNotReadyAddresses(publishNotReadyAddresses)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselector","title":"fn spec.override.service.spec.withSelector","text":"<pre><code>withSelector(selector)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselectormixin","title":"fn spec.override.service.spec.withSelectorMixin","text":"<pre><code>withSelectorMixin(selector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithsessionaffinity","title":"fn spec.override.service.spec.withSessionAffinity","text":"<pre><code>withSessionAffinity(sessionAffinity)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithtype","title":"fn spec.override.service.spec.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecports","title":"obj spec.override.service.spec.ports","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithappprotocol","title":"fn spec.override.service.spec.ports.withAppProtocol","text":"<pre><code>withAppProtocol(appProtocol)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithname","title":"fn spec.override.service.spec.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithnodeport","title":"fn spec.override.service.spec.ports.withNodePort","text":"<pre><code>withNodePort(nodePort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithport","title":"fn spec.override.service.spec.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithprotocol","title":"fn spec.override.service.spec.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithtargetport","title":"fn spec.override.service.spec.ports.withTargetPort","text":"<pre><code>withTargetPort(targetPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfig","title":"obj spec.override.service.spec.sessionAffinityConfig","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfigclientip","title":"obj spec.override.service.spec.sessionAffinityConfig.clientIP","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecsessionaffinityconfigclientipwithtimeoutseconds","title":"fn spec.override.service.spec.sessionAffinityConfig.clientIP.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulset","title":"obj spec.override.statefulSet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetmetadata","title":"obj spec.override.statefulSet.metadata","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotations","title":"fn spec.override.statefulSet.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabels","title":"fn spec.override.statefulSet.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspec","title":"obj spec.override.statefulSet.spec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithpodmanagementpolicy","title":"fn spec.override.statefulSet.spec.withPodManagementPolicy","text":"<pre><code>withPodManagementPolicy(podManagementPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithreplicas","title":"fn spec.override.statefulSet.spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithservicename","title":"fn spec.override.statefulSet.spec.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplates","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplates","text":"<pre><code>withVolumeClaimTemplates(volumeClaimTemplates)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplatesmixin","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplatesMixin","text":"<pre><code>withVolumeClaimTemplatesMixin(volumeClaimTemplates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselector","title":"obj spec.override.statefulSet.spec.selector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.selector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplate","title":"obj spec.override.statefulSet.spec.template","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatemetadata","title":"obj spec.override.statefulSet.spec.template.metadata","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotations","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabels","title":"fn spec.override.statefulSet.spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithname","title":"fn spec.override.statefulSet.spec.template.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithnamespace","title":"fn spec.override.statefulSet.spec.template.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespec","title":"obj spec.override.statefulSet.spec.template.spec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithactivedeadlineseconds","title":"fn spec.override.statefulSet.spec.template.spec.withActiveDeadlineSeconds","text":"<pre><code>withActiveDeadlineSeconds(activeDeadlineSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithautomountserviceaccounttoken","title":"fn spec.override.statefulSet.spec.template.spec.withAutomountServiceAccountToken","text":"<pre><code>withAutomountServiceAccountToken(automountServiceAccountToken)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withContainers","text":"<pre><code>withContainers(containers)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withContainersMixin","text":"<pre><code>withContainersMixin(containers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithdnspolicy","title":"fn spec.override.statefulSet.spec.template.spec.withDnsPolicy","text":"<pre><code>withDnsPolicy(dnsPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithenableservicelinks","title":"fn spec.override.statefulSet.spec.template.spec.withEnableServiceLinks","text":"<pre><code>withEnableServiceLinks(enableServiceLinks)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainers","text":"<pre><code>withEphemeralContainers(ephemeralContainers)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainersMixin","text":"<pre><code>withEphemeralContainersMixin(ephemeralContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliases","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliases","text":"<pre><code>withHostAliases(hostAliases)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliasesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliasesMixin","text":"<pre><code>withHostAliasesMixin(hostAliases)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostipc","title":"fn spec.override.statefulSet.spec.template.spec.withHostIPC","text":"<pre><code>withHostIPC(hostIPC)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostnetwork","title":"fn spec.override.statefulSet.spec.template.spec.withHostNetwork","text":"<pre><code>withHostNetwork(hostNetwork)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostpid","title":"fn spec.override.statefulSet.spec.template.spec.withHostPID","text":"<pre><code>withHostPID(hostPID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostusers","title":"fn spec.override.statefulSet.spec.template.spec.withHostUsers","text":"<pre><code>withHostUsers(hostUsers)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostname","title":"fn spec.override.statefulSet.spec.template.spec.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecrets","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecretsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainers","text":"<pre><code>withInitContainers(initContainers)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainersMixin","text":"<pre><code>withInitContainersMixin(initContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodename","title":"fn spec.override.statefulSet.spec.template.spec.withNodeName","text":"<pre><code>withNodeName(nodeName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselector","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelector","text":"<pre><code>withNodeSelector(nodeSelector)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselectormixin","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelectorMixin","text":"<pre><code>withNodeSelectorMixin(nodeSelector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverhead","title":"fn spec.override.statefulSet.spec.template.spec.withOverhead","text":"<pre><code>withOverhead(overhead)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverheadmixin","title":"fn spec.override.statefulSet.spec.template.spec.withOverheadMixin","text":"<pre><code>withOverheadMixin(overhead)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpreemptionpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withPreemptionPolicy","text":"<pre><code>withPreemptionPolicy(preemptionPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriority","title":"fn spec.override.statefulSet.spec.template.spec.withPriority","text":"<pre><code>withPriority(priority)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriorityclassname","title":"fn spec.override.statefulSet.spec.template.spec.withPriorityClassName","text":"<pre><code>withPriorityClassName(priorityClassName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgates","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGates","text":"<pre><code>withReadinessGates(readinessGates)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgatesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGatesMixin","text":"<pre><code>withReadinessGatesMixin(readinessGates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithrestartpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withRestartPolicy","text":"<pre><code>withRestartPolicy(restartPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithruntimeclassname","title":"fn spec.override.statefulSet.spec.template.spec.withRuntimeClassName","text":"<pre><code>withRuntimeClassName(runtimeClassName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithschedulername","title":"fn spec.override.statefulSet.spec.template.spec.withSchedulerName","text":"<pre><code>withSchedulerName(schedulerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccount","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccountname","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccountName","text":"<pre><code>withServiceAccountName(serviceAccountName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsethostnameasfqdn","title":"fn spec.override.statefulSet.spec.template.spec.withSetHostnameAsFQDN","text":"<pre><code>withSetHostnameAsFQDN(setHostnameAsFQDN)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithshareprocessnamespace","title":"fn spec.override.statefulSet.spec.template.spec.withShareProcessNamespace","text":"<pre><code>withShareProcessNamespace(shareProcessNamespace)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsubdomain","title":"fn spec.override.statefulSet.spec.template.spec.withSubdomain","text":"<pre><code>withSubdomain(subdomain)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerations","title":"fn spec.override.statefulSet.spec.template.spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerationsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraints","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraints","text":"<pre><code>withTopologySpreadConstraints(topologySpreadConstraints)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraintsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraintsMixin","text":"<pre><code>withTopologySpreadConstraintsMixin(topologySpreadConstraints)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumes","title":"fn spec.override.statefulSet.spec.template.spec.withVolumes","text":"<pre><code>withVolumes(volumes)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withVolumesMixin","text":"<pre><code>withVolumesMixin(volumes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainers","title":"obj spec.override.statefulSet.spec.template.spec.containers","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.containers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.containers.env","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersports","title":"obj spec.override.statefulSet.spec.template.spec.containers.ports","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.containers.resources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfig","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameservers","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameservers","text":"<pre><code>withNameservers(nameservers)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameserversmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameserversMixin","text":"<pre><code>withNameserversMixin(nameservers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptions","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearches","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearches","text":"<pre><code>withSearches(searches)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearchesmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearchesMixin","text":"<pre><code>withSearchesMixin(searches)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfigoptions","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig.options","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithname","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainers","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtargetcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTargetContainerName","text":"<pre><code>withTargetContainerName(targetContainerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespechostaliases","title":"obj spec.override.statefulSet.spec.template.spec.hostAliases","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnames","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnamesmixin","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithip","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withIp","text":"<pre><code>withIp(ip)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecimagepullsecrets","title":"obj spec.override.statefulSet.spec.template.spec.imagePullSecrets","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecimagepullsecretswithname","title":"fn spec.override.statefulSet.spec.template.spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainers","title":"obj spec.override.statefulSet.spec.template.spec.initContainers","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.ports","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.resources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecos","title":"obj spec.override.statefulSet.spec.template.spec.os","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecoswithname","title":"fn spec.override.statefulSet.spec.template.spec.os.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecreadinessgates","title":"obj spec.override.statefulSet.spec.template.spec.readinessGates","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecreadinessgateswithconditiontype","title":"fn spec.override.statefulSet.spec.template.spec.readinessGates.withConditionType","text":"<pre><code>withConditionType(conditionType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.securityContext","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroup","text":"<pre><code>withFsGroup(fsGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroupchangepolicy","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroupChangePolicy","text":"<pre><code>withFsGroupChangePolicy(fsGroupChangePolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroups","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroups","text":"<pre><code>withSupplementalGroups(supplementalGroups)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroupsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroupsMixin","text":"<pre><code>withSupplementalGroupsMixin(supplementalGroups)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctls","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctls","text":"<pre><code>withSysctls(sysctls)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctlsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctlsMixin","text":"<pre><code>withSysctlsMixin(sysctls)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextsysctls","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectolerations","title":"obj spec.override.statefulSet.spec.template.spec.tolerations","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswitheffect","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithkey","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithtolerationseconds","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraints","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmatchlabelkeys","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMatchLabelKeys","text":"<pre><code>withMatchLabelKeys(matchLabelKeys)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmatchlabelkeysmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMatchLabelKeysMixin","text":"<pre><code>withMatchLabelKeysMixin(matchLabelKeys)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmaxskew","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMaxSkew","text":"<pre><code>withMaxSkew(maxSkew)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmindomains","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMinDomains","text":"<pre><code>withMinDomains(minDomains)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithnodeaffinitypolicy","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withNodeAffinityPolicy","text":"<pre><code>withNodeAffinityPolicy(nodeAffinityPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithnodetaintspolicy","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withNodeTaintsPolicy","text":"<pre><code>withNodeTaintsPolicy(nodeTaintsPolicy)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithwhenunsatisfiable","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withWhenUnsatisfiable","text":"<pre><code>withWhenUnsatisfiable(whenUnsatisfiable)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselector","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumes","title":"obj spec.override.statefulSet.spec.template.spec.volumes","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeswithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesawselasticblockstore","title":"obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazuredisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithcachingmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withCachingMode","text":"<pre><code>withCachingMode(cachingMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskName","text":"<pre><code>withDiskName(diskName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskuri","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskURI","text":"<pre><code>withDiskURI(diskURI)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazurefile","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureFile","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsharename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withShareName","text":"<pre><code>withShareName(shareName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithsecretfile","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withSecretFile","text":"<pre><code>withSecretFile(secretFile)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfssecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfssecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescinder","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescindersecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescindersecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributes","text":"<pre><code>withVolumeAttributes(volumeAttributes)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributesMixin","text":"<pre><code>withVolumeAttributesMixin(volumeAttributes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesemptydir","title":"obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithmedium","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withMedium","text":"<pre><code>withMedium(medium)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithsizelimit","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withSizeLimit","text":"<pre><code>withSizeLimit(sizeLimit)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeral","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplate","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadata","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadata","text":"<pre><code>withMetadata(metadata)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadatamixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadataMixin","text":"<pre><code>withMetadataMixin(metadata)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespec","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithstorageclassname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasource","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourceref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithapigroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselector","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesfc","title":"obj spec.override.statefulSet.spec.template.spec.volumes.fc","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwns","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNs","text":"<pre><code>withTargetWWNs(targetWWNs)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwnsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNsMixin","text":"<pre><code>withTargetWWNsMixin(targetWWNs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwids","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwids","text":"<pre><code>withWwids(wwids)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwidsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwidsMixin","text":"<pre><code>withWwidsMixin(wwids)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflocker","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flocker","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetName","text":"<pre><code>withDatasetName(datasetName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetuuid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetUUID","text":"<pre><code>withDatasetUUID(datasetUUID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgcepersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpdname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPdName","text":"<pre><code>withPdName(pdName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgitrepo","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithdirectory","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withDirectory","text":"<pre><code>withDirectory(directory)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrepository","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrevision","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRevision","text":"<pre><code>withRevision(revision)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesglusterfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithendpoints","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withEndpoints","text":"<pre><code>withEndpoints(endpoints)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumeshostpath","title":"obj spec.override.statefulSet.spec.template.spec.volumes.hostPath","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithtype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthdiscovery","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthDiscovery","text":"<pre><code>withChapAuthDiscovery(chapAuthDiscovery)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthsession","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthSession","text":"<pre><code>withChapAuthSession(chapAuthSession)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithinitiatorname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withInitiatorName","text":"<pre><code>withInitiatorName(initiatorName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiqn","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIqn","text":"<pre><code>withIqn(iqn)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiscsiinterface","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIscsiInterface","text":"<pre><code>withIscsiInterface(iscsiInterface)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportals","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortals","text":"<pre><code>withPortals(portals)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportalsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortalsMixin","text":"<pre><code>withPortalsMixin(portals)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithtargetportal","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withTargetPortal","text":"<pre><code>withTargetPortal(targetPortal)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsisecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsisecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesnfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.nfs","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithserver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withServer","text":"<pre><code>withServer(server)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaim","title":"obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithclaimname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withClaimName","text":"<pre><code>withClaimName(claimName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithpdid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withPdID","text":"<pre><code>withPdID(pdID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesportworxvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojected","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsources","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSources","text":"<pre><code>withSources(sources)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsourcesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSourcesMixin","text":"<pre><code>withSourcesMixin(sources)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttoken","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithaudience","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withAudience","text":"<pre><code>withAudience(audience)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithexpirationseconds","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withExpirationSeconds","text":"<pre><code>withExpirationSeconds(expirationSeconds)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesquobyte","title":"obj spec.override.statefulSet.spec.template.spec.volumes.quobyte","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithgroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithregistry","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withRegistry","text":"<pre><code>withRegistry(registry)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithtenant","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withTenant","text":"<pre><code>withTenant(tenant)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithvolume","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withVolume","text":"<pre><code>withVolume(volume)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbd","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithimage","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithkeyring","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withKeyring","text":"<pre><code>withKeyring(keyring)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithpool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withPool","text":"<pre><code>withPool(pool)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbdsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleio","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithgateway","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withGateway","text":"<pre><code>withGateway(gateway)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithprotectiondomain","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withProtectionDomain","text":"<pre><code>withProtectionDomain(protectionDomain)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsslenabled","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSslEnabled","text":"<pre><code>withSslEnabled(sslEnabled)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStorageMode","text":"<pre><code>withStorageMode(storageMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragepool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStoragePool","text":"<pre><code>withStoragePool(storagePool)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsystem","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSystem","text":"<pre><code>withSystem(system)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleiosecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiosecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret.items","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageos","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumenamespace","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeNamespace","text":"<pre><code>withVolumeNamespace(volumeNamespace)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageossecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageossecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesvspherevolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyID","text":"<pre><code>withStoragePolicyID(storagePolicyID)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyName","text":"<pre><code>withStoragePolicyName(storagePolicyName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithvolumepath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withVolumePath","text":"<pre><code>withVolumePath(volumePath)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategy","title":"obj spec.override.statefulSet.spec.updateStrategy","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategywithtype","title":"fn spec.override.statefulSet.spec.updateStrategy.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategyrollingupdate","title":"obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategyrollingupdatewithmaxunavailable","title":"fn spec.override.statefulSet.spec.updateStrategy.rollingUpdate.withMaxUnavailable","text":"<pre><code>withMaxUnavailable(maxUnavailable)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategyrollingupdatewithpartition","title":"fn spec.override.statefulSet.spec.updateStrategy.rollingUpdate.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplates","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithapiversion","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesmetadata","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotations","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithnamespace","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspec","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodes","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithstorageclassname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumemode","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumename","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasource","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourceref","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithapigroup","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecresources","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimits","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequests","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselector","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specpersistence","title":"obj spec.persistence","text":"<p>\"The desired persistent storage configuration for each Pod in the cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorage","title":"fn spec.persistence.withStorage","text":"<pre><code>withStorage(storage)\n</code></pre> <p>\"The requested size of the persistent volume attached to each Pod in the RabbitmqCluster. The format of this field matches that defined by kubernetes/apimachinery. See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorageclassname","title":"fn spec.persistence.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre> <p>\"The name of the StorageClass to claim a PersistentVolume from.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specrabbitmq","title":"obj spec.rabbitmq","text":"<p>\"Configuration options for RabbitMQ Pods created in the cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalconfig","title":"fn spec.rabbitmq.withAdditionalConfig","text":"<pre><code>withAdditionalConfig(additionalConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on this config, see https://www.rabbitmq.com/configure.html#config-file\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalplugins","title":"fn spec.rabbitmq.withAdditionalPlugins","text":"<pre><code>withAdditionalPlugins(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalpluginsmixin","title":"fn spec.rabbitmq.withAdditionalPluginsMixin","text":"<pre><code>withAdditionalPluginsMixin(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadvancedconfig","title":"fn spec.rabbitmq.withAdvancedConfig","text":"<pre><code>withAdvancedConfig(advancedConfig)\n</code></pre> <p>\"Specify any rabbitmq advanced.config configurations to apply to the cluster. For more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithenvconfig","title":"fn spec.rabbitmq.withEnvConfig","text":"<pre><code>withEnvConfig(envConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specresources","title":"obj spec.resources","text":"<p>\"The desired compute resource requirements of Pods in the cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimits","title":"fn spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimitsmixin","title":"fn spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackend","title":"obj spec.secretBackend","text":"<p>\"Secret backend configuration for the RabbitmqCluster. Enables to fetch default user credentials and certificates from K8s external secret stores.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackendvault","title":"obj spec.secretBackend.vault","text":"<p>\"VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations) to RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector) to be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications (based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithannotations","title":"fn spec.secretBackend.vault.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Vault annotations that override the Vault annotations set by the cluster-operator. For a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithannotationsmixin","title":"fn spec.secretBackend.vault.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Vault annotations that override the Vault annotations set by the cluster-operator. For a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithdefaultuserpath","title":"fn spec.secretBackend.vault.withDefaultUserPath","text":"<pre><code>withDefaultUserPath(defaultUserPath)\n</code></pre> <p>\"Path in Vault to access a KV (Key-Value) secret with the fields username and password for the default user. For example \\\"secret/data/rabbitmq/config\\\".\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithdefaultuserupdaterimage","title":"fn spec.secretBackend.vault.withDefaultUserUpdaterImage","text":"<pre><code>withDefaultUserUpdaterImage(defaultUserUpdaterImage)\n</code></pre> <p>\"Sidecar container that updates the default user's password in RabbitMQ when it changes in Vault. Additionally, it updates /var/lib/rabbitmq/.rabbitmqadmin.conf (used by rabbitmqadmin CLI). Set to empty string to disable the sidecar container.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithrole","title":"fn spec.secretBackend.vault.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role in Vault. If vault.defaultUserPath is set, this role must have capability to read the pre-created default user credential in Vault. If vault.tls is set, this role must have capability to create and update certificates in the Vault PKI engine for the domains \\\"\\\" and \\\".svc\\\".\""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackendvaulttls","title":"obj spec.secretBackend.vault.tls","text":""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithaltnames","title":"fn spec.secretBackend.vault.tls.withAltNames","text":"<pre><code>withAltNames(altNames)\n</code></pre> <p>\"Specifies the requested Subject Alternative Names (SANs), in a comma-delimited list. These will be appended to the SANs added by the cluster-operator. The cluster-operator will add SANs: \\\"-server-.-nodes.\\\" for each pod, e.g. \\\"myrabbit-server-0.myrabbit-nodes.default\\\".\""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithcommonname","title":"fn spec.secretBackend.vault.tls.withCommonName","text":"<pre><code>withCommonName(commonName)\n</code></pre> <p>\"Specifies the requested certificate Common Name (CN). Defaults to ..svc if not provided.\""},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithipsans","title":"fn spec.secretBackend.vault.tls.withIpSans","text":"<pre><code>withIpSans(ipSans)\n</code></pre> <p>\"Specifies the requested IP Subject Alternative Names, in a comma-delimited list.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithpkiissuerpath","title":"fn spec.secretBackend.vault.tls.withPkiIssuerPath","text":"<pre><code>withPkiIssuerPath(pkiIssuerPath)\n</code></pre> <p>\"Path in Vault PKI engine. For example \\\"pki/issue/hashicorp-com\\\". required\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-specservice","title":"obj spec.service","text":"<p>\"The desired state of the Kubernetes Service to create for the cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotations","title":"fn spec.service.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotationsmixin","title":"fn spec.service.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithtype","title":"fn spec.service.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort. For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectls","title":"obj spec.tls","text":"<p>\"TLS-related configuration for the RabbitMQ cluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithcasecretname","title":"fn spec.tls.withCaSecretName","text":"<pre><code>withCaSecretName(caSecretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS. The Secret must store this as ca.crt. This Secret can be created by running <code>kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert</code> Used for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithdisablenontlslisteners","title":"fn spec.tls.withDisableNonTLSListeners","text":"<pre><code>withDisableNonTLSListeners(disableNonTLSListeners)\n</code></pre> <p>\"When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt. Only TLS-enabled clients will be able to connect.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithsecretname","title":"fn spec.tls.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key &amp; public certificate for TLS. The Secret must store these as tls.key and tls.crt, respectively. This Secret can be created by running <code>kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</code>\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectolerations","title":"obj spec.tolerations","text":"<p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswitheffect","title":"fn spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithkey","title":"fn spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithoperator","title":"fn spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithtolerationseconds","title":"fn spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre> <p>\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\"</p>"},{"location":"2.0/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithvalue","title":"fn spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\"</p>"},{"location":"2.1/","title":"rabbitmq","text":"<pre><code>local rabbitmq = import \"github.com/jsonnet-libs/rabbitmq-libsonnet/2.1/main.libsonnet\"\n</code></pre> <ul> <li>rabbitmq</li> </ul>"},{"location":"2.1/rabbitmq/","title":"rabbitmq","text":"<ul> <li>v1beta1</li> </ul>"},{"location":"2.1/rabbitmq/v1beta1/","title":"rabbitmq.v1beta1","text":"<ul> <li>rabbitmqCluster</li> </ul>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/","title":"rabbitmq.v1beta1.rabbitmqCluster","text":"<p>\"RabbitmqCluster is the Schema for the RabbitmqCluster API. Each instance of this object corresponds to a single RabbitMQ cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#index","title":"Index","text":"<ul> <li><code>fn new(name)</code></li> <li><code>obj metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withClusterName(clusterName)</code></li> <li><code>fn withCreationTimestamp(creationTimestamp)</code></li> <li><code>fn withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)</code></li> <li><code>fn withDeletionTimestamp(deletionTimestamp)</code></li> <li><code>fn withFinalizers(finalizers)</code></li> <li><code>fn withFinalizersMixin(finalizers)</code></li> <li><code>fn withGenerateName(generateName)</code></li> <li><code>fn withGeneration(generation)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> <li><code>fn withOwnerReferences(ownerReferences)</code></li> <li><code>fn withOwnerReferencesMixin(ownerReferences)</code></li> <li><code>fn withResourceVersion(resourceVersion)</code></li> <li><code>fn withSelfLink(selfLink)</code></li> <li><code>fn withUid(uid)</code></li> </ul> </li> <li><code>obj spec</code><ul> <li><code>fn withDelayStartSeconds(delayStartSeconds)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withSkipPostDeploySteps(skipPostDeploySteps)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>obj spec.affinity</code><ul> <li><code>obj spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override</code><ul> <li><code>obj spec.override.service</code><ul> <li><code>obj spec.override.service.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.service.spec</code><ul> <li><code>fn withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)</code></li> <li><code>fn withClusterIP(clusterIP)</code></li> <li><code>fn withClusterIPs(clusterIPs)</code></li> <li><code>fn withClusterIPsMixin(clusterIPs)</code></li> <li><code>fn withExternalIPs(externalIPs)</code></li> <li><code>fn withExternalIPsMixin(externalIPs)</code></li> <li><code>fn withExternalName(externalName)</code></li> <li><code>fn withExternalTrafficPolicy(externalTrafficPolicy)</code></li> <li><code>fn withHealthCheckNodePort(healthCheckNodePort)</code></li> <li><code>fn withInternalTrafficPolicy(internalTrafficPolicy)</code></li> <li><code>fn withIpFamilies(ipFamilies)</code></li> <li><code>fn withIpFamiliesMixin(ipFamilies)</code></li> <li><code>fn withIpFamilyPolicy(ipFamilyPolicy)</code></li> <li><code>fn withLoadBalancerClass(loadBalancerClass)</code></li> <li><code>fn withLoadBalancerIP(loadBalancerIP)</code></li> <li><code>fn withLoadBalancerSourceRanges(loadBalancerSourceRanges)</code></li> <li><code>fn withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withPublishNotReadyAddresses(publishNotReadyAddresses)</code></li> <li><code>fn withSelector(selector)</code></li> <li><code>fn withSelectorMixin(selector)</code></li> <li><code>fn withSessionAffinity(sessionAffinity)</code></li> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.service.spec.ports</code><ul> <li><code>fn withAppProtocol(appProtocol)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNodePort(nodePort)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withProtocol(protocol)</code></li> <li><code>fn withTargetPort(targetPort)</code></li> </ul> </li> <li><code>obj spec.override.service.spec.sessionAffinityConfig</code><ul> <li><code>obj spec.override.service.spec.sessionAffinityConfig.clientIP</code><ul> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet</code><ul> <li><code>obj spec.override.statefulSet.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec</code><ul> <li><code>fn withMinReadySeconds(minReadySeconds)</code></li> <li><code>fn withPodManagementPolicy(podManagementPolicy)</code></li> <li><code>fn withReplicas(replicas)</code></li> <li><code>fn withServiceName(serviceName)</code></li> <li><code>fn withVolumeClaimTemplates(volumeClaimTemplates)</code></li> <li><code>fn withVolumeClaimTemplatesMixin(volumeClaimTemplates)</code></li> <li><code>obj spec.override.statefulSet.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template</code><ul> <li><code>obj spec.override.statefulSet.spec.template.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec</code><ul> <li><code>fn withActiveDeadlineSeconds(activeDeadlineSeconds)</code></li> <li><code>fn withAutomountServiceAccountToken(automountServiceAccountToken)</code></li> <li><code>fn withContainers(containers)</code></li> <li><code>fn withContainersMixin(containers)</code></li> <li><code>fn withDnsPolicy(dnsPolicy)</code></li> <li><code>fn withEnableServiceLinks(enableServiceLinks)</code></li> <li><code>fn withEphemeralContainers(ephemeralContainers)</code></li> <li><code>fn withEphemeralContainersMixin(ephemeralContainers)</code></li> <li><code>fn withHostAliases(hostAliases)</code></li> <li><code>fn withHostAliasesMixin(hostAliases)</code></li> <li><code>fn withHostIPC(hostIPC)</code></li> <li><code>fn withHostNetwork(hostNetwork)</code></li> <li><code>fn withHostPID(hostPID)</code></li> <li><code>fn withHostUsers(hostUsers)</code></li> <li><code>fn withHostname(hostname)</code></li> <li><code>fn withImagePullSecrets(imagePullSecrets)</code></li> <li><code>fn withImagePullSecretsMixin(imagePullSecrets)</code></li> <li><code>fn withInitContainers(initContainers)</code></li> <li><code>fn withInitContainersMixin(initContainers)</code></li> <li><code>fn withNodeName(nodeName)</code></li> <li><code>fn withNodeSelector(nodeSelector)</code></li> <li><code>fn withNodeSelectorMixin(nodeSelector)</code></li> <li><code>fn withOverhead(overhead)</code></li> <li><code>fn withOverheadMixin(overhead)</code></li> <li><code>fn withPreemptionPolicy(preemptionPolicy)</code></li> <li><code>fn withPriority(priority)</code></li> <li><code>fn withPriorityClassName(priorityClassName)</code></li> <li><code>fn withReadinessGates(readinessGates)</code></li> <li><code>fn withReadinessGatesMixin(readinessGates)</code></li> <li><code>fn withRestartPolicy(restartPolicy)</code></li> <li><code>fn withRuntimeClassName(runtimeClassName)</code></li> <li><code>fn withSchedulerName(schedulerName)</code></li> <li><code>fn withServiceAccount(serviceAccount)</code></li> <li><code>fn withServiceAccountName(serviceAccountName)</code></li> <li><code>fn withSetHostnameAsFQDN(setHostnameAsFQDN)</code></li> <li><code>fn withShareProcessNamespace(shareProcessNamespace)</code></li> <li><code>fn withSubdomain(subdomain)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTolerations(tolerations)</code></li> <li><code>fn withTolerationsMixin(tolerations)</code></li> <li><code>fn withTopologySpreadConstraints(topologySpreadConstraints)</code></li> <li><code>fn withTopologySpreadConstraintsMixin(topologySpreadConstraints)</code></li> <li><code>fn withVolumes(volumes)</code></li> <li><code>fn withVolumesMixin(volumes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNodeSelectorTerms(nodeSelectorTerms)</code></li> <li><code>fn withNodeSelectorTermsMixin(nodeSelectorTerms)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchFields(matchFields)</code></li> <li><code>fn withMatchFieldsMixin(matchFields)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity</code><ul> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>fn withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withWeight(weight)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution</code><ul> <li><code>fn withNamespaces(namespaces)</code></li> <li><code>fn withNamespacesMixin(namespaces)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig</code><ul> <li><code>fn withNameservers(nameservers)</code></li> <li><code>fn withNameserversMixin(nameservers)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withSearches(searches)</code></li> <li><code>fn withSearchesMixin(searches)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.dnsConfig.options</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTargetContainerName(targetContainerName)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.hostAliases</code><ul> <li><code>fn withHostnames(hostnames)</code></li> <li><code>fn withHostnamesMixin(hostnames)</code></li> <li><code>fn withIp(ip)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.imagePullSecrets</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers</code><ul> <li><code>fn withArgs(args)</code></li> <li><code>fn withArgsMixin(args)</code></li> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> <li><code>fn withEnv(env)</code></li> <li><code>fn withEnvFrom(envFrom)</code></li> <li><code>fn withEnvFromMixin(envFrom)</code></li> <li><code>fn withEnvMixin(env)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withImagePullPolicy(imagePullPolicy)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withPorts(ports)</code></li> <li><code>fn withPortsMixin(ports)</code></li> <li><code>fn withStdin(stdin)</code></li> <li><code>fn withStdinOnce(stdinOnce)</code></li> <li><code>fn withTerminationMessagePath(terminationMessagePath)</code></li> <li><code>fn withTerminationMessagePolicy(terminationMessagePolicy)</code></li> <li><code>fn withTty(tty)</code></li> <li><code>fn withVolumeDevices(volumeDevices)</code></li> <li><code>fn withVolumeDevicesMixin(volumeDevices)</code></li> <li><code>fn withVolumeMounts(volumeMounts)</code></li> <li><code>fn withVolumeMountsMixin(volumeMounts)</code></li> <li><code>fn withWorkingDir(workingDir)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom</code><ul> <li><code>fn withPrefix(prefix)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.ports</code><ul> <li><code>fn withContainerPort(containerPort)</code></li> <li><code>fn withHostIP(hostIP)</code></li> <li><code>fn withHostPort(hostPort)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withProtocol(protocol)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext</code><ul> <li><code>fn withAllowPrivilegeEscalation(allowPrivilegeEscalation)</code></li> <li><code>fn withPrivileged(privileged)</code></li> <li><code>fn withProcMount(procMount)</code></li> <li><code>fn withReadOnlyRootFilesystem(readOnlyRootFilesystem)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities</code><ul> <li><code>fn withAdd(add)</code></li> <li><code>fn withAddMixin(add)</code></li> <li><code>fn withDrop(drop)</code></li> <li><code>fn withDropMixin(drop)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe</code><ul> <li><code>fn withFailureThreshold(failureThreshold)</code></li> <li><code>fn withInitialDelaySeconds(initialDelaySeconds)</code></li> <li><code>fn withPeriodSeconds(periodSeconds)</code></li> <li><code>fn withSuccessThreshold(successThreshold)</code></li> <li><code>fn withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)</code></li> <li><code>fn withTimeoutSeconds(timeoutSeconds)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec</code><ul> <li><code>fn withCommand(command)</code></li> <li><code>fn withCommandMixin(command)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc</code><ul> <li><code>fn withPort(port)</code></li> <li><code>fn withService(service)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withHttpHeaders(httpHeaders)</code></li> <li><code>fn withHttpHeadersMixin(httpHeaders)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withPort(port)</code></li> <li><code>fn withScheme(scheme)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket</code><ul> <li><code>fn withHost(host)</code></li> <li><code>fn withPort(port)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices</code><ul> <li><code>fn withDevicePath(devicePath)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts</code><ul> <li><code>fn withMountPath(mountPath)</code></li> <li><code>fn withMountPropagation(mountPropagation)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSubPath(subPath)</code></li> <li><code>fn withSubPathExpr(subPathExpr)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.os</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.readinessGates</code><ul> <li><code>fn withConditionType(conditionType)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext</code><ul> <li><code>fn withFsGroup(fsGroup)</code></li> <li><code>fn withFsGroupChangePolicy(fsGroupChangePolicy)</code></li> <li><code>fn withRunAsGroup(runAsGroup)</code></li> <li><code>fn withRunAsNonRoot(runAsNonRoot)</code></li> <li><code>fn withRunAsUser(runAsUser)</code></li> <li><code>fn withSupplementalGroups(supplementalGroups)</code></li> <li><code>fn withSupplementalGroupsMixin(supplementalGroups)</code></li> <li><code>fn withSysctls(sysctls)</code></li> <li><code>fn withSysctlsMixin(sysctls)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions</code><ul> <li><code>fn withLevel(level)</code></li> <li><code>fn withRole(role)</code></li> <li><code>fn withType(type)</code></li> <li><code>fn withUser(user)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile</code><ul> <li><code>fn withLocalhostProfile(localhostProfile)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls</code><ul> <li><code>fn withName(name)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions</code><ul> <li><code>fn withGmsaCredentialSpec(gmsaCredentialSpec)</code></li> <li><code>fn withGmsaCredentialSpecName(gmsaCredentialSpecName)</code></li> <li><code>fn withHostProcess(hostProcess)</code></li> <li><code>fn withRunAsUserName(runAsUserName)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints</code><ul> <li><code>fn withMatchLabelKeys(matchLabelKeys)</code></li> <li><code>fn withMatchLabelKeysMixin(matchLabelKeys)</code></li> <li><code>fn withMaxSkew(maxSkew)</code></li> <li><code>fn withMinDomains(minDomains)</code></li> <li><code>fn withNodeAffinityPolicy(nodeAffinityPolicy)</code></li> <li><code>fn withNodeTaintsPolicy(nodeTaintsPolicy)</code></li> <li><code>fn withTopologyKey(topologyKey)</code></li> <li><code>fn withWhenUnsatisfiable(whenUnsatisfiable)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes</code><ul> <li><code>fn withName(name)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk</code><ul> <li><code>fn withCachingMode(cachingMode)</code></li> <li><code>fn withDiskName(diskName)</code></li> <li><code>fn withDiskURI(diskURI)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.azureFile</code><ul> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>fn withShareName(shareName)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs</code><ul> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSecretFile(secretFile)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeAttributes(volumeAttributes)</code></li> <li><code>fn withVolumeAttributesMixin(volumeAttributes)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir</code><ul> <li><code>fn withMedium(medium)</code></li> <li><code>fn withSizeLimit(sizeLimit)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate</code><ul> <li><code>fn withMetadata(metadata)</code></li> <li><code>fn withMetadataMixin(metadata)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.fc</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetWWNs(targetWWNs)</code></li> <li><code>fn withTargetWWNsMixin(targetWWNs)</code></li> <li><code>fn withWwids(wwids)</code></li> <li><code>fn withWwidsMixin(wwids)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume</code><ul> <li><code>fn withDriver(driver)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withOptions(options)</code></li> <li><code>fn withOptionsMixin(options)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.flocker</code><ul> <li><code>fn withDatasetName(datasetName)</code></li> <li><code>fn withDatasetUUID(datasetUUID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPartition(partition)</code></li> <li><code>fn withPdName(pdName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo</code><ul> <li><code>fn withDirectory(directory)</code></li> <li><code>fn withRepository(repository)</code></li> <li><code>fn withRevision(revision)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs</code><ul> <li><code>fn withEndpoints(endpoints)</code></li> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.hostPath</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi</code><ul> <li><code>fn withChapAuthDiscovery(chapAuthDiscovery)</code></li> <li><code>fn withChapAuthSession(chapAuthSession)</code></li> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withInitiatorName(initiatorName)</code></li> <li><code>fn withIqn(iqn)</code></li> <li><code>fn withIscsiInterface(iscsiInterface)</code></li> <li><code>fn withLun(lun)</code></li> <li><code>fn withPortals(portals)</code></li> <li><code>fn withPortalsMixin(portals)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withTargetPortal(targetPortal)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.nfs</code><ul> <li><code>fn withPath(path)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withServer(server)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim</code><ul> <li><code>fn withClaimName(claimName)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withPdID(pdID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeID(volumeID)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withSources(sources)</code></li> <li><code>fn withSourcesMixin(sources)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources</code><ul> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items</code><ul> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withFieldPath(fieldPath)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef</code><ul> <li><code>fn withContainerName(containerName)</code></li> <li><code>fn withDivisor(divisor)</code></li> <li><code>fn withResource(resource)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret</code><ul> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken</code><ul> <li><code>fn withAudience(audience)</code></li> <li><code>fn withExpirationSeconds(expirationSeconds)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.quobyte</code><ul> <li><code>fn withGroup(group)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withRegistry(registry)</code></li> <li><code>fn withTenant(tenant)</code></li> <li><code>fn withUser(user)</code></li> <li><code>fn withVolume(volume)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withImage(image)</code></li> <li><code>fn withKeyring(keyring)</code></li> <li><code>fn withMonitors(monitors)</code></li> <li><code>fn withMonitorsMixin(monitors)</code></li> <li><code>fn withPool(pool)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withUser(user)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withGateway(gateway)</code></li> <li><code>fn withProtectionDomain(protectionDomain)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withSslEnabled(sslEnabled)</code></li> <li><code>fn withStorageMode(storageMode)</code></li> <li><code>fn withStoragePool(storagePool)</code></li> <li><code>fn withSystem(system)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret</code><ul> <li><code>fn withDefaultMode(defaultMode)</code></li> <li><code>fn withItems(items)</code></li> <li><code>fn withItemsMixin(items)</code></li> <li><code>fn withOptional(optional)</code></li> <li><code>fn withSecretName(secretName)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.secret.items</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withMode(mode)</code></li> <li><code>fn withPath(path)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withReadOnly(readOnly)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>fn withVolumeNamespace(volumeNamespace)</code></li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume</code><ul> <li><code>fn withFsType(fsType)</code></li> <li><code>fn withStoragePolicyID(storagePolicyID)</code></li> <li><code>fn withStoragePolicyName(storagePolicyName)</code></li> <li><code>fn withVolumePath(volumePath)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.updateStrategy</code><ul> <li><code>fn withType(type)</code></li> <li><code>obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate</code><ul> <li><code>fn withMaxUnavailable(maxUnavailable)</code></li> <li><code>fn withPartition(partition)</code></li> </ul> </li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates</code><ul> <li><code>fn withApiVersion(apiVersion)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withLabels(labels)</code></li> <li><code>fn withLabelsMixin(labels)</code></li> <li><code>fn withName(name)</code></li> <li><code>fn withNamespace(namespace)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec</code><ul> <li><code>fn withAccessModes(accessModes)</code></li> <li><code>fn withAccessModesMixin(accessModes)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> <li><code>fn withVolumeMode(volumeMode)</code></li> <li><code>fn withVolumeName(volumeName)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef</code><ul> <li><code>fn withApiGroup(apiGroup)</code></li> <li><code>fn withKind(kind)</code></li> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector</code><ul> <li><code>fn withMatchExpressions(matchExpressions)</code></li> <li><code>fn withMatchExpressionsMixin(matchExpressions)</code></li> <li><code>fn withMatchLabels(matchLabels)</code></li> <li><code>fn withMatchLabelsMixin(matchLabels)</code></li> <li><code>obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions</code><ul> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withValues(values)</code></li> <li><code>fn withValuesMixin(values)</code></li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.persistence</code><ul> <li><code>fn withStorage(storage)</code></li> <li><code>fn withStorageClassName(storageClassName)</code></li> </ul> </li> <li><code>obj spec.rabbitmq</code><ul> <li><code>fn withAdditionalConfig(additionalConfig)</code></li> <li><code>fn withAdditionalPlugins(additionalPlugins)</code></li> <li><code>fn withAdditionalPluginsMixin(additionalPlugins)</code></li> <li><code>fn withAdvancedConfig(advancedConfig)</code></li> <li><code>fn withEnvConfig(envConfig)</code></li> </ul> </li> <li><code>obj spec.resources</code><ul> <li><code>fn withLimits(limits)</code></li> <li><code>fn withLimitsMixin(limits)</code></li> <li><code>fn withRequests(requests)</code></li> <li><code>fn withRequestsMixin(requests)</code></li> </ul> </li> <li><code>obj spec.secretBackend</code><ul> <li><code>obj spec.secretBackend.externalSecret</code><ul> <li><code>fn withName(name)</code></li> </ul> </li> <li><code>obj spec.secretBackend.vault</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withDefaultUserPath(defaultUserPath)</code></li> <li><code>fn withDefaultUserUpdaterImage(defaultUserUpdaterImage)</code></li> <li><code>fn withRole(role)</code></li> <li><code>obj spec.secretBackend.vault.tls</code><ul> <li><code>fn withAltNames(altNames)</code></li> <li><code>fn withCommonName(commonName)</code></li> <li><code>fn withIpSans(ipSans)</code></li> <li><code>fn withPkiIssuerPath(pkiIssuerPath)</code></li> </ul> </li> </ul> </li> </ul> </li> <li><code>obj spec.service</code><ul> <li><code>fn withAnnotations(annotations)</code></li> <li><code>fn withAnnotationsMixin(annotations)</code></li> <li><code>fn withType(type)</code></li> </ul> </li> <li><code>obj spec.tls</code><ul> <li><code>fn withCaSecretName(caSecretName)</code></li> <li><code>fn withDisableNonTLSListeners(disableNonTLSListeners)</code></li> <li><code>fn withSecretName(secretName)</code></li> </ul> </li> <li><code>obj spec.tolerations</code><ul> <li><code>fn withEffect(effect)</code></li> <li><code>fn withKey(key)</code></li> <li><code>fn withOperator(operator)</code></li> <li><code>fn withTolerationSeconds(tolerationSeconds)</code></li> <li><code>fn withValue(value)</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fields","title":"Fields","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-new","title":"fn new","text":"<pre><code>new(name)\n</code></pre> <p>new returns an instance of RabbitmqCluster</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-metadata","title":"obj metadata","text":"<p>\"ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotations","title":"fn metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithannotationsmixin","title":"fn metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithclustername","title":"fn metadata.withClusterName","text":"<pre><code>withClusterName(clusterName)\n</code></pre> <p>\"The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithcreationtimestamp","title":"fn metadata.withCreationTimestamp","text":"<pre><code>withCreationTimestamp(creationTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiongraceperiodseconds","title":"fn metadata.withDeletionGracePeriodSeconds","text":"<pre><code>withDeletionGracePeriodSeconds(deletionGracePeriodSeconds)\n</code></pre> <p>\"Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithdeletiontimestamp","title":"fn metadata.withDeletionTimestamp","text":"<pre><code>withDeletionTimestamp(deletionTimestamp)\n</code></pre> <p>\"Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizers","title":"fn metadata.withFinalizers","text":"<pre><code>withFinalizers(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithfinalizersmixin","title":"fn metadata.withFinalizersMixin","text":"<pre><code>withFinalizersMixin(finalizers)\n</code></pre> <p>\"Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneratename","title":"fn metadata.withGenerateName","text":"<pre><code>withGenerateName(generateName)\n</code></pre> <p>\"GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\\n\\nIf this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return 201 Created or 500 with Reason ServerTimeout indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the Retry-After header).\\n\\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithgeneration","title":"fn metadata.withGeneration","text":"<pre><code>withGeneration(generation)\n</code></pre> <p>\"A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabels","title":"fn metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithlabelsmixin","title":"fn metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>\"Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithname","title":"fn metadata.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithnamespace","title":"fn metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre> <p>\"Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \\\"default\\\" namespace, but \\\"default\\\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\\n\\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferences","title":"fn metadata.withOwnerReferences","text":"<pre><code>withOwnerReferences(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithownerreferencesmixin","title":"fn metadata.withOwnerReferencesMixin","text":"<pre><code>withOwnerReferencesMixin(ownerReferences)\n</code></pre> <p>\"List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithresourceversion","title":"fn metadata.withResourceVersion","text":"<pre><code>withResourceVersion(resourceVersion)\n</code></pre> <p>\"An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\\n\\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithselflink","title":"fn metadata.withSelfLink","text":"<pre><code>withSelfLink(selfLink)\n</code></pre> <p>\"SelfLink is a URL representing this object. Populated by the system. Read-only.\\n\\nDEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-metadatawithuid","title":"fn metadata.withUid","text":"<pre><code>withUid(uid)\n</code></pre> <p>\"UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\\n\\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-spec","title":"obj spec","text":"<p>\"Spec is the desired state of the RabbitmqCluster Custom Resource.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithdelaystartseconds","title":"fn spec.withDelayStartSeconds","text":"<pre><code>withDelayStartSeconds(delayStartSeconds)\n</code></pre> <p>\"DelayStartSeconds is the time the init container (<code>setup-container</code>) will sleep before terminating. This effectively delays the time between starting the Pod and starting the <code>rabbitmq</code> container. RabbitMQ relies on up-to-date DNS entries early during peer discovery. The purpose of this artificial delay is to ensure that DNS entries are up-to-date when booting RabbitMQ. For more information, see https://github.com/kubernetes/kubernetes/issues/92559 If your Kubernetes DNS backend is configured with a low DNS cache value or publishes not ready addresses promptly, you can decrase this value or set it to 0.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimage","title":"fn spec.withImage","text":"<pre><code>withImage(image)\n</code></pre> <p>\"Image is the name of the RabbitMQ docker image to use for RabbitMQ nodes in the RabbitmqCluster. Must be provided together with ImagePullSecrets in order to use an image in a private registry.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecrets","title":"fn spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithimagepullsecretsmixin","title":"fn spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithreplicas","title":"fn spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre> <p>\"Replicas is the number of nodes in the RabbitMQ cluster. Each node is deployed as a Replica in a StatefulSet. Only 1, 3, 5 replicas clusters are tested. This value should be an odd number to ensure the resultant cluster can establish exactly one quorum of nodes in the event of a fragmenting network partition.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithskippostdeploysteps","title":"fn spec.withSkipPostDeploySteps","text":"<pre><code>withSkipPostDeploySteps(skipPostDeploySteps)\n</code></pre> <p>\"If unset, or set to false, the cluster will run <code>rabbitmq-queues rebalance all</code> whenever the cluster is updated. Set to true to prevent the operator rebalancing queue leaders after a cluster update. Has no effect if the cluster only consists of one node. For more information, see https://www.rabbitmq.com/rabbitmq-queues.8.html#rebalance\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithterminationgraceperiodseconds","title":"fn spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre> <p>\"TerminationGracePeriodSeconds is the timeout that each rabbitmqcluster pod will have to terminate gracefully. It defaults to 604800 seconds ( a week long) to ensure that the container preStop lifecycle hook can finish running. For more information, see: https://github.com/rabbitmq/cluster-operator/blob/main/docs/design/20200520-graceful-pod-termination.md\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerations","title":"fn spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specwithtolerationsmixin","title":"fn spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinity","title":"obj spec.affinity","text":"<p>\"Affinity scheduling rules to be applied on created Pods.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinity","title":"obj spec.affinity.nodeAffinity","text":"<p>\"Describes node affinity scheduling rules for the pod.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":"<p>\"A node selector term, associated with the corresponding weight.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>\"Required. A list of node selector terms. The terms are ORed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":"<p>\"Required. A list of node selector terms. The terms are ORed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"A list of node selector requirements by node's labels.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>\"A list of node selector requirements by node's fields.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":"<p>\"A list of node selector requirements by node's labels.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":"<p>\"A list of node selector requirements by node's fields.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"The label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinity","title":"obj spec.affinity.podAffinity","text":"<p>\"Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinity","title":"obj spec.affinity.podAntiAffinity","text":"<p>\"Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":"<p>\"The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \\\"weight\\\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre> <p>\"weight associated with matching the corresponding podAffinityTerm, in the range 1-100.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":"<p>\"Required. A pod affinity term, associated with the corresponding weight.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":"<p>\"If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>\"namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \\\"this pod's namespace\\\".\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre> <p>\"This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":"<p>\"A label query over a set of resources, in this case pods.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":"<p>\"A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \\\"this pod's namespace\\\". An empty selector ({}) matches all namespaces.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>\"matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \\\"key\\\", the operator is \\\"In\\\", and the values array contains only \\\"value\\\". The requirements are ANDed.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":"<p>\"matchExpressions is a list of label selector requirements. The requirements are ANDed.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"key is the label key that the selector applies to.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>\"values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specimagepullsecrets","title":"obj spec.imagePullSecrets","text":"<p>\"List of Secret resource containing access credentials to the registry for the RabbitMQ image. Required if the docker registry is private.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specimagepullsecretswithname","title":"fn spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverride","title":"obj spec.override","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservice","title":"obj spec.override.service","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicemetadata","title":"obj spec.override.service.metadata","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotations","title":"fn spec.override.service.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithannotationsmixin","title":"fn spec.override.service.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabels","title":"fn spec.override.service.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicemetadatawithlabelsmixin","title":"fn spec.override.service.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespec","title":"obj spec.override.service.spec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithallocateloadbalancernodeports","title":"fn spec.override.service.spec.withAllocateLoadBalancerNodePorts","text":"<pre><code>withAllocateLoadBalancerNodePorts(allocateLoadBalancerNodePorts)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterip","title":"fn spec.override.service.spec.withClusterIP","text":"<pre><code>withClusterIP(clusterIP)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusterips","title":"fn spec.override.service.spec.withClusterIPs","text":"<pre><code>withClusterIPs(clusterIPs)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithclusteripsmixin","title":"fn spec.override.service.spec.withClusterIPsMixin","text":"<pre><code>withClusterIPsMixin(clusterIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalips","title":"fn spec.override.service.spec.withExternalIPs","text":"<pre><code>withExternalIPs(externalIPs)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalipsmixin","title":"fn spec.override.service.spec.withExternalIPsMixin","text":"<pre><code>withExternalIPsMixin(externalIPs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternalname","title":"fn spec.override.service.spec.withExternalName","text":"<pre><code>withExternalName(externalName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithexternaltrafficpolicy","title":"fn spec.override.service.spec.withExternalTrafficPolicy","text":"<pre><code>withExternalTrafficPolicy(externalTrafficPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithhealthchecknodeport","title":"fn spec.override.service.spec.withHealthCheckNodePort","text":"<pre><code>withHealthCheckNodePort(healthCheckNodePort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithinternaltrafficpolicy","title":"fn spec.override.service.spec.withInternalTrafficPolicy","text":"<pre><code>withInternalTrafficPolicy(internalTrafficPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilies","title":"fn spec.override.service.spec.withIpFamilies","text":"<pre><code>withIpFamilies(ipFamilies)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamiliesmixin","title":"fn spec.override.service.spec.withIpFamiliesMixin","text":"<pre><code>withIpFamiliesMixin(ipFamilies)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithipfamilypolicy","title":"fn spec.override.service.spec.withIpFamilyPolicy","text":"<pre><code>withIpFamilyPolicy(ipFamilyPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancerclass","title":"fn spec.override.service.spec.withLoadBalancerClass","text":"<pre><code>withLoadBalancerClass(loadBalancerClass)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancerip","title":"fn spec.override.service.spec.withLoadBalancerIP","text":"<pre><code>withLoadBalancerIP(loadBalancerIP)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourceranges","title":"fn spec.override.service.spec.withLoadBalancerSourceRanges","text":"<pre><code>withLoadBalancerSourceRanges(loadBalancerSourceRanges)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithloadbalancersourcerangesmixin","title":"fn spec.override.service.spec.withLoadBalancerSourceRangesMixin","text":"<pre><code>withLoadBalancerSourceRangesMixin(loadBalancerSourceRanges)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithports","title":"fn spec.override.service.spec.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithportsmixin","title":"fn spec.override.service.spec.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithpublishnotreadyaddresses","title":"fn spec.override.service.spec.withPublishNotReadyAddresses","text":"<pre><code>withPublishNotReadyAddresses(publishNotReadyAddresses)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselector","title":"fn spec.override.service.spec.withSelector","text":"<pre><code>withSelector(selector)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithselectormixin","title":"fn spec.override.service.spec.withSelectorMixin","text":"<pre><code>withSelectorMixin(selector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithsessionaffinity","title":"fn spec.override.service.spec.withSessionAffinity","text":"<pre><code>withSessionAffinity(sessionAffinity)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecwithtype","title":"fn spec.override.service.spec.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecports","title":"obj spec.override.service.spec.ports","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithappprotocol","title":"fn spec.override.service.spec.ports.withAppProtocol","text":"<pre><code>withAppProtocol(appProtocol)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithname","title":"fn spec.override.service.spec.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithnodeport","title":"fn spec.override.service.spec.ports.withNodePort","text":"<pre><code>withNodePort(nodePort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithport","title":"fn spec.override.service.spec.ports.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithprotocol","title":"fn spec.override.service.spec.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecportswithtargetport","title":"fn spec.override.service.spec.ports.withTargetPort","text":"<pre><code>withTargetPort(targetPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfig","title":"obj spec.override.service.spec.sessionAffinityConfig","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverrideservicespecsessionaffinityconfigclientip","title":"obj spec.override.service.spec.sessionAffinityConfig.clientIP","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverrideservicespecsessionaffinityconfigclientipwithtimeoutseconds","title":"fn spec.override.service.spec.sessionAffinityConfig.clientIP.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulset","title":"obj spec.override.statefulSet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetmetadata","title":"obj spec.override.statefulSet.metadata","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotations","title":"fn spec.override.statefulSet.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabels","title":"fn spec.override.statefulSet.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspec","title":"obj spec.override.statefulSet.spec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithminreadyseconds","title":"fn spec.override.statefulSet.spec.withMinReadySeconds","text":"<pre><code>withMinReadySeconds(minReadySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithpodmanagementpolicy","title":"fn spec.override.statefulSet.spec.withPodManagementPolicy","text":"<pre><code>withPodManagementPolicy(podManagementPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithreplicas","title":"fn spec.override.statefulSet.spec.withReplicas","text":"<pre><code>withReplicas(replicas)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithservicename","title":"fn spec.override.statefulSet.spec.withServiceName","text":"<pre><code>withServiceName(serviceName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplates","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplates","text":"<pre><code>withVolumeClaimTemplates(volumeClaimTemplates)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecwithvolumeclaimtemplatesmixin","title":"fn spec.override.statefulSet.spec.withVolumeClaimTemplatesMixin","text":"<pre><code>withVolumeClaimTemplatesMixin(volumeClaimTemplates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselector","title":"obj spec.override.statefulSet.spec.selector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.selector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplate","title":"obj spec.override.statefulSet.spec.template","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatemetadata","title":"obj spec.override.statefulSet.spec.template.metadata","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotations","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabels","title":"fn spec.override.statefulSet.spec.template.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.template.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithname","title":"fn spec.override.statefulSet.spec.template.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatemetadatawithnamespace","title":"fn spec.override.statefulSet.spec.template.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespec","title":"obj spec.override.statefulSet.spec.template.spec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithactivedeadlineseconds","title":"fn spec.override.statefulSet.spec.template.spec.withActiveDeadlineSeconds","text":"<pre><code>withActiveDeadlineSeconds(activeDeadlineSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithautomountserviceaccounttoken","title":"fn spec.override.statefulSet.spec.template.spec.withAutomountServiceAccountToken","text":"<pre><code>withAutomountServiceAccountToken(automountServiceAccountToken)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withContainers","text":"<pre><code>withContainers(containers)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withContainersMixin","text":"<pre><code>withContainersMixin(containers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithdnspolicy","title":"fn spec.override.statefulSet.spec.template.spec.withDnsPolicy","text":"<pre><code>withDnsPolicy(dnsPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithenableservicelinks","title":"fn spec.override.statefulSet.spec.template.spec.withEnableServiceLinks","text":"<pre><code>withEnableServiceLinks(enableServiceLinks)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainers","text":"<pre><code>withEphemeralContainers(ephemeralContainers)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithephemeralcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withEphemeralContainersMixin","text":"<pre><code>withEphemeralContainersMixin(ephemeralContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliases","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliases","text":"<pre><code>withHostAliases(hostAliases)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostaliasesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withHostAliasesMixin","text":"<pre><code>withHostAliasesMixin(hostAliases)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostipc","title":"fn spec.override.statefulSet.spec.template.spec.withHostIPC","text":"<pre><code>withHostIPC(hostIPC)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostnetwork","title":"fn spec.override.statefulSet.spec.template.spec.withHostNetwork","text":"<pre><code>withHostNetwork(hostNetwork)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostpid","title":"fn spec.override.statefulSet.spec.template.spec.withHostPID","text":"<pre><code>withHostPID(hostPID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostusers","title":"fn spec.override.statefulSet.spec.template.spec.withHostUsers","text":"<pre><code>withHostUsers(hostUsers)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithhostname","title":"fn spec.override.statefulSet.spec.template.spec.withHostname","text":"<pre><code>withHostname(hostname)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecrets","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecrets","text":"<pre><code>withImagePullSecrets(imagePullSecrets)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithimagepullsecretsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withImagePullSecretsMixin","text":"<pre><code>withImagePullSecretsMixin(imagePullSecrets)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainers","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainers","text":"<pre><code>withInitContainers(initContainers)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithinitcontainersmixin","title":"fn spec.override.statefulSet.spec.template.spec.withInitContainersMixin","text":"<pre><code>withInitContainersMixin(initContainers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodename","title":"fn spec.override.statefulSet.spec.template.spec.withNodeName","text":"<pre><code>withNodeName(nodeName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselector","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelector","text":"<pre><code>withNodeSelector(nodeSelector)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithnodeselectormixin","title":"fn spec.override.statefulSet.spec.template.spec.withNodeSelectorMixin","text":"<pre><code>withNodeSelectorMixin(nodeSelector)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverhead","title":"fn spec.override.statefulSet.spec.template.spec.withOverhead","text":"<pre><code>withOverhead(overhead)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithoverheadmixin","title":"fn spec.override.statefulSet.spec.template.spec.withOverheadMixin","text":"<pre><code>withOverheadMixin(overhead)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpreemptionpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withPreemptionPolicy","text":"<pre><code>withPreemptionPolicy(preemptionPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriority","title":"fn spec.override.statefulSet.spec.template.spec.withPriority","text":"<pre><code>withPriority(priority)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithpriorityclassname","title":"fn spec.override.statefulSet.spec.template.spec.withPriorityClassName","text":"<pre><code>withPriorityClassName(priorityClassName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgates","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGates","text":"<pre><code>withReadinessGates(readinessGates)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithreadinessgatesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withReadinessGatesMixin","text":"<pre><code>withReadinessGatesMixin(readinessGates)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithrestartpolicy","title":"fn spec.override.statefulSet.spec.template.spec.withRestartPolicy","text":"<pre><code>withRestartPolicy(restartPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithruntimeclassname","title":"fn spec.override.statefulSet.spec.template.spec.withRuntimeClassName","text":"<pre><code>withRuntimeClassName(runtimeClassName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithschedulername","title":"fn spec.override.statefulSet.spec.template.spec.withSchedulerName","text":"<pre><code>withSchedulerName(schedulerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccount","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccount","text":"<pre><code>withServiceAccount(serviceAccount)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithserviceaccountname","title":"fn spec.override.statefulSet.spec.template.spec.withServiceAccountName","text":"<pre><code>withServiceAccountName(serviceAccountName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsethostnameasfqdn","title":"fn spec.override.statefulSet.spec.template.spec.withSetHostnameAsFQDN","text":"<pre><code>withSetHostnameAsFQDN(setHostnameAsFQDN)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithshareprocessnamespace","title":"fn spec.override.statefulSet.spec.template.spec.withShareProcessNamespace","text":"<pre><code>withShareProcessNamespace(shareProcessNamespace)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithsubdomain","title":"fn spec.override.statefulSet.spec.template.spec.withSubdomain","text":"<pre><code>withSubdomain(subdomain)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerations","title":"fn spec.override.statefulSet.spec.template.spec.withTolerations","text":"<pre><code>withTolerations(tolerations)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtolerationsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTolerationsMixin","text":"<pre><code>withTolerationsMixin(tolerations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraints","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraints","text":"<pre><code>withTopologySpreadConstraints(topologySpreadConstraints)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithtopologyspreadconstraintsmixin","title":"fn spec.override.statefulSet.spec.template.spec.withTopologySpreadConstraintsMixin","text":"<pre><code>withTopologySpreadConstraintsMixin(topologySpreadConstraints)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumes","title":"fn spec.override.statefulSet.spec.template.spec.withVolumes","text":"<pre><code>withVolumes(volumes)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecwithvolumesmixin","title":"fn spec.override.statefulSet.spec.template.spec.withVolumesMixin","text":"<pre><code>withVolumesMixin(volumes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreference","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencewithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinitypreferredduringschedulingignoredduringexecutionpreferencematchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.preferredDuringSchedulingIgnoredDuringExecution.preference.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectorterms","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTerms","text":"<pre><code>withNodeSelectorTerms(nodeSelectorTerms)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionwithnodeselectortermsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNodeSelectorTermsMixin","text":"<pre><code>withNodeSelectorTermsMixin(nodeSelectorTerms)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectorterms","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfields","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFields","text":"<pre><code>withMatchFields(matchFields)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermswithmatchfieldsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.withMatchFieldsMixin","text":"<pre><code>withMatchFieldsMixin(matchFields)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfields","title":"obj spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitynodeaffinityrequiredduringschedulingignoredduringexecutionnodeselectortermsmatchfieldswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.nodeAffinity.requiredDuringSchedulingIgnoredDuringExecution.nodeSelectorTerms.matchFields.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinity","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecution(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithpreferredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withPreferredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withPreferredDuringSchedulingIgnoredDuringExecutionMixin(preferredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecution","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecution","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecution(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitywithrequiredduringschedulingignoredduringexecutionmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.withRequiredDuringSchedulingIgnoredDuringExecutionMixin","text":"<pre><code>withRequiredDuringSchedulingIgnoredDuringExecutionMixin(requiredDuringSchedulingIgnoredDuringExecution)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionwithweight","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.withWeight","text":"<pre><code>withWeight(weight)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinityterm","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinitypreferredduringschedulingignoredduringexecutionpodaffinitytermnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.preferredDuringSchedulingIgnoredDuringExecution.podAffinityTerm.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecution","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespaces","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespaces","text":"<pre><code>withNamespaces(namespaces)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithnamespacesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withNamespacesMixin","text":"<pre><code>withNamespacesMixin(namespaces)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionwithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionlabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselector","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecaffinitypodantiaffinityrequiredduringschedulingignoredduringexecutionnamespaceselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.affinity.podAntiAffinity.requiredDuringSchedulingIgnoredDuringExecution.namespaceSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainers","title":"obj spec.override.statefulSet.spec.template.spec.containers","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.containers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.containers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.containers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.containers.env","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.containers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersports","title":"obj spec.override.statefulSet.spec.template.spec.containers.ports","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.containers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.containers.resources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.containers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.containers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeDevices","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespeccontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.containers.volumeMounts","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespeccontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.containers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfig","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameservers","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameservers","text":"<pre><code>withNameservers(nameservers)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithnameserversmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withNameserversMixin","text":"<pre><code>withNameserversMixin(nameservers)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptions","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearches","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearches","text":"<pre><code>withSearches(searches)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigwithsearchesmixin","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.withSearchesMixin","text":"<pre><code>withSearchesMixin(searches)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecdnsconfigoptions","title":"obj spec.override.statefulSet.spec.template.spec.dnsConfig.options","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithname","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecdnsconfigoptionswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.dnsConfig.options.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainers","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtargetcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTargetContainerName","text":"<pre><code>withTargetContainerName(targetContainerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecephemeralcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.ephemeralContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespechostaliases","title":"obj spec.override.statefulSet.spec.template.spec.hostAliases","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnames","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnames","text":"<pre><code>withHostnames(hostnames)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithhostnamesmixin","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withHostnamesMixin","text":"<pre><code>withHostnamesMixin(hostnames)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespechostaliaseswithip","title":"fn spec.override.statefulSet.spec.template.spec.hostAliases.withIp","text":"<pre><code>withIp(ip)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecimagepullsecrets","title":"obj spec.override.statefulSet.spec.template.spec.imagePullSecrets","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecimagepullsecretswithname","title":"fn spec.override.statefulSet.spec.template.spec.imagePullSecrets.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainers","title":"obj spec.override.statefulSet.spec.template.spec.initContainers","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargs","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgs","text":"<pre><code>withArgs(args)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithargsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withArgsMixin","text":"<pre><code>withArgsMixin(args)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenv","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnv","text":"<pre><code>withEnv(env)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrom","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFrom","text":"<pre><code>withEnvFrom(envFrom)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvfrommixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvFromMixin","text":"<pre><code>withEnvFromMixin(envFrom)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithenvmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withEnvMixin","text":"<pre><code>withEnvMixin(env)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimage","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithimagepullpolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withImagePullPolicy","text":"<pre><code>withImagePullPolicy(imagePullPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithports","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPorts","text":"<pre><code>withPorts(ports)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithportsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withPortsMixin","text":"<pre><code>withPortsMixin(ports)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdin","text":"<pre><code>withStdin(stdin)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithstdinonce","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withStdinOnce","text":"<pre><code>withStdinOnce(stdinOnce)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePath","text":"<pre><code>withTerminationMessagePath(terminationMessagePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithterminationmessagepolicy","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTerminationMessagePolicy","text":"<pre><code>withTerminationMessagePolicy(terminationMessagePolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithtty","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withTty","text":"<pre><code>withTty(tty)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevices","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevices","text":"<pre><code>withVolumeDevices(volumeDevices)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumedevicesmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeDevicesMixin","text":"<pre><code>withVolumeDevicesMixin(volumeDevices)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemounts","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMounts","text":"<pre><code>withVolumeMounts(volumeMounts)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithvolumemountsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withVolumeMountsMixin","text":"<pre><code>withVolumeMountsMixin(volumeMounts)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerswithworkingdir","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.withWorkingDir","text":"<pre><code>withWorkingDir(workingDir)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenv","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvwithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromconfigmapkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.configMapKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithkey","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvvaluefromsecretkeyrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.env.valueFrom.secretKeyRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfrom","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromwithprefix","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.withPrefix","text":"<pre><code>withPrefix(prefix)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmapref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromconfigmaprefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.configMapRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretref","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersenvfromsecretrefwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.envFrom.secretRef.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycle","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststart","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststartexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarthttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecyclepoststarttcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.postStart.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestop","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestopexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestophttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslifecycleprestoptcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.lifecycle.preStop.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerslivenessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.livenessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersports","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.ports","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithcontainerport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withContainerPort","text":"<pre><code>withContainerPort(containerPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostip","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostIP","text":"<pre><code>withHostIP(hostIP)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithhostport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withHostPort","text":"<pre><code>withHostPort(hostPort)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersportswithprotocol","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.ports.withProtocol","text":"<pre><code>withProtocol(protocol)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersreadinessprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.readinessProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersresources","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.resources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithallowprivilegeescalation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withAllowPrivilegeEscalation","text":"<pre><code>withAllowPrivilegeEscalation(allowPrivilegeEscalation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprivileged","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withPrivileged","text":"<pre><code>withPrivileged(privileged)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithprocmount","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withProcMount","text":"<pre><code>withProcMount(procMount)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithreadonlyrootfilesystem","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withReadOnlyRootFilesystem","text":"<pre><code>withReadOnlyRootFilesystem(readOnlyRootFilesystem)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilities","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithadd","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAdd","text":"<pre><code>withAdd(add)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithaddmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withAddMixin","text":"<pre><code>withAddMixin(add)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdrop","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDrop","text":"<pre><code>withDrop(drop)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextcapabilitieswithdropmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.capabilities.withDropMixin","text":"<pre><code>withDropMixin(drop)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainerssecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobe","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithfailurethreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withFailureThreshold","text":"<pre><code>withFailureThreshold(failureThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithinitialdelayseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withInitialDelaySeconds","text":"<pre><code>withInitialDelaySeconds(initialDelaySeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withPeriodSeconds","text":"<pre><code>withPeriodSeconds(periodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithsuccessthreshold","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withSuccessThreshold","text":"<pre><code>withSuccessThreshold(successThreshold)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithterminationgraceperiodseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withTerminationGracePeriodSeconds","text":"<pre><code>withTerminationGracePeriodSeconds(terminationGracePeriodSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobewithtimeoutseconds","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.withTimeoutSeconds","text":"<pre><code>withTimeoutSeconds(timeoutSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexec","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommand","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommand","text":"<pre><code>withCommand(command)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobeexecwithcommandmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.exec.withCommandMixin","text":"<pre><code>withCommandMixin(command)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpc","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpcwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobegrpcwithservice","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.grpc.withService","text":"<pre><code>withService(service)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpget","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheaders","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeaders","text":"<pre><code>withHttpHeaders(httpHeaders)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithhttpheadersmixin","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withHttpHeadersMixin","text":"<pre><code>withHttpHeadersMixin(httpHeaders)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgetwithscheme","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.withScheme","text":"<pre><code>withScheme(scheme)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaders","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobehttpgethttpheaderswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.httpGet.httpHeaders.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocket","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithhost","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withHost","text":"<pre><code>withHost(host)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersstartupprobetcpsocketwithport","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.startupProbe.tcpSocket.withPort","text":"<pre><code>withPort(port)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumedevices","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithdevicepath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withDevicePath","text":"<pre><code>withDevicePath(devicePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumedeviceswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeDevices.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecinitcontainersvolumemounts","title":"obj spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPath","text":"<pre><code>withMountPath(mountPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithmountpropagation","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withMountPropagation","text":"<pre><code>withMountPropagation(mountPropagation)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithname","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpath","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPath","text":"<pre><code>withSubPath(subPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecinitcontainersvolumemountswithsubpathexpr","title":"fn spec.override.statefulSet.spec.template.spec.initContainers.volumeMounts.withSubPathExpr","text":"<pre><code>withSubPathExpr(subPathExpr)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecos","title":"obj spec.override.statefulSet.spec.template.spec.os","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecoswithname","title":"fn spec.override.statefulSet.spec.template.spec.os.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecreadinessgates","title":"obj spec.override.statefulSet.spec.template.spec.readinessGates","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecreadinessgateswithconditiontype","title":"fn spec.override.statefulSet.spec.template.spec.readinessGates.withConditionType","text":"<pre><code>withConditionType(conditionType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontext","title":"obj spec.override.statefulSet.spec.template.spec.securityContext","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroup","text":"<pre><code>withFsGroup(fsGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithfsgroupchangepolicy","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withFsGroupChangePolicy","text":"<pre><code>withFsGroupChangePolicy(fsGroupChangePolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasgroup","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsGroup","text":"<pre><code>withRunAsGroup(runAsGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasnonroot","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsNonRoot","text":"<pre><code>withRunAsNonRoot(runAsNonRoot)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithrunasuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withRunAsUser","text":"<pre><code>withRunAsUser(runAsUser)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroups","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroups","text":"<pre><code>withSupplementalGroups(supplementalGroups)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsupplementalgroupsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSupplementalGroupsMixin","text":"<pre><code>withSupplementalGroupsMixin(supplementalGroups)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctls","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctls","text":"<pre><code>withSysctls(sysctls)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwithsysctlsmixin","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.withSysctlsMixin","text":"<pre><code>withSysctlsMixin(sysctls)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithlevel","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withLevel","text":"<pre><code>withLevel(level)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithrole","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withRole","text":"<pre><code>withRole(role)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextselinuxoptionswithuser","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seLinuxOptions.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofile","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithlocalhostprofile","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withLocalhostProfile","text":"<pre><code>withLocalhostProfile(localhostProfile)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextseccompprofilewithtype","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.seccompProfile.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextsysctls","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.sysctls","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextsysctlswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.sysctls.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptions","title":"obj spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspec","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpec","text":"<pre><code>withGmsaCredentialSpec(gmsaCredentialSpec)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithgmsacredentialspecname","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withGmsaCredentialSpecName","text":"<pre><code>withGmsaCredentialSpecName(gmsaCredentialSpecName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithhostprocess","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withHostProcess","text":"<pre><code>withHostProcess(hostProcess)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecsecuritycontextwindowsoptionswithrunasusername","title":"fn spec.override.statefulSet.spec.template.spec.securityContext.windowsOptions.withRunAsUserName","text":"<pre><code>withRunAsUserName(runAsUserName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectolerations","title":"obj spec.override.statefulSet.spec.template.spec.tolerations","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswitheffect","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithkey","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithtolerationseconds","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectolerationswithvalue","title":"fn spec.override.statefulSet.spec.template.spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraints","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmatchlabelkeys","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMatchLabelKeys","text":"<pre><code>withMatchLabelKeys(matchLabelKeys)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmatchlabelkeysmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMatchLabelKeysMixin","text":"<pre><code>withMatchLabelKeysMixin(matchLabelKeys)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmaxskew","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMaxSkew","text":"<pre><code>withMaxSkew(maxSkew)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithmindomains","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withMinDomains","text":"<pre><code>withMinDomains(minDomains)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithnodeaffinitypolicy","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withNodeAffinityPolicy","text":"<pre><code>withNodeAffinityPolicy(nodeAffinityPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithnodetaintspolicy","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withNodeTaintsPolicy","text":"<pre><code>withNodeTaintsPolicy(nodeTaintsPolicy)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithtopologykey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withTopologyKey","text":"<pre><code>withTopologyKey(topologyKey)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintswithwhenunsatisfiable","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.withWhenUnsatisfiable","text":"<pre><code>withWhenUnsatisfiable(whenUnsatisfiable)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselector","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespectopologyspreadconstraintslabelselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.topologySpreadConstraints.labelSelector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumes","title":"obj spec.override.statefulSet.spec.template.spec.volumes","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeswithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesawselasticblockstore","title":"obj spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesawselasticblockstorewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.awsElasticBlockStore.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazuredisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureDisk","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithcachingmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withCachingMode","text":"<pre><code>withCachingMode(cachingMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskName","text":"<pre><code>withDiskName(diskName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithdiskuri","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withDiskURI","text":"<pre><code>withDiskURI(diskURI)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurediskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesazurefile","title":"obj spec.override.statefulSet.spec.template.spec.volumes.azureFile","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesazurefilewithsharename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.azureFile.withShareName","text":"<pre><code>withShareName(shareName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithsecretfile","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withSecretFile","text":"<pre><code>withSecretFile(secretFile)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfswithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescephfssecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescephfssecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cephfs.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescinder","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescinderwithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescindersecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescindersecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.cinder.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.configMap.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributes","text":"<pre><code>withVolumeAttributes(volumeAttributes)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsiwithvolumeattributesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.withVolumeAttributesMixin","text":"<pre><code>withVolumeAttributesMixin(volumeAttributes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumescsinodepublishsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.csi.nodePublishSecretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesemptydir","title":"obj spec.override.statefulSet.spec.template.spec.volumes.emptyDir","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithmedium","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withMedium","text":"<pre><code>withMedium(medium)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesemptydirwithsizelimit","title":"fn spec.override.statefulSet.spec.template.spec.volumes.emptyDir.withSizeLimit","text":"<pre><code>withSizeLimit(sizeLimit)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeral","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplate","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadata","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadata","text":"<pre><code>withMetadata(metadata)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatewithmetadatamixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.withMetadataMixin","text":"<pre><code>withMetadataMixin(metadata)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespec","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodes","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithstorageclassname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecwithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasource","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcewithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourceref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithapigroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithkind","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecdatasourcerefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.dataSourceRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimits","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequests","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselector","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesephemeralvolumeclaimtemplatespecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.ephemeral.volumeClaimTemplate.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesfc","title":"obj spec.override.statefulSet.spec.template.spec.volumes.fc","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwns","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNs","text":"<pre><code>withTargetWWNs(targetWWNs)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithtargetwwnsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withTargetWWNsMixin","text":"<pre><code>withTargetWWNsMixin(targetWWNs)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwids","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwids","text":"<pre><code>withWwids(wwids)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesfcwithwwidsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.fc.withWwidsMixin","text":"<pre><code>withWwidsMixin(wwids)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithdriver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withDriver","text":"<pre><code>withDriver(driver)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptions","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptions","text":"<pre><code>withOptions(options)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithoptionsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withOptionsMixin","text":"<pre><code>withOptionsMixin(options)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflexvolumesecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flexVolume.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesflocker","title":"obj spec.override.statefulSet.spec.template.spec.volumes.flocker","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetName","text":"<pre><code>withDatasetName(datasetName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesflockerwithdatasetuuid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.flocker.withDatasetUUID","text":"<pre><code>withDatasetUUID(datasetUUID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgcepersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpartition","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithpdname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withPdName","text":"<pre><code>withPdName(pdName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgcepersistentdiskwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gcePersistentDisk.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesgitrepo","title":"obj spec.override.statefulSet.spec.template.spec.volumes.gitRepo","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithdirectory","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withDirectory","text":"<pre><code>withDirectory(directory)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrepository","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRepository","text":"<pre><code>withRepository(repository)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesgitrepowithrevision","title":"fn spec.override.statefulSet.spec.template.spec.volumes.gitRepo.withRevision","text":"<pre><code>withRevision(revision)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesglusterfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.glusterfs","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithendpoints","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withEndpoints","text":"<pre><code>withEndpoints(endpoints)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesglusterfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.glusterfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumeshostpath","title":"obj spec.override.statefulSet.spec.template.spec.volumes.hostPath","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumeshostpathwithtype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.hostPath.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthdiscovery","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthDiscovery","text":"<pre><code>withChapAuthDiscovery(chapAuthDiscovery)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithchapauthsession","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withChapAuthSession","text":"<pre><code>withChapAuthSession(chapAuthSession)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithinitiatorname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withInitiatorName","text":"<pre><code>withInitiatorName(initiatorName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiqn","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIqn","text":"<pre><code>withIqn(iqn)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithiscsiinterface","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withIscsiInterface","text":"<pre><code>withIscsiInterface(iscsiInterface)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithlun","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withLun","text":"<pre><code>withLun(lun)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportals","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortals","text":"<pre><code>withPortals(portals)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithportalsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withPortalsMixin","text":"<pre><code>withPortalsMixin(portals)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsiwithtargetportal","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.withTargetPortal","text":"<pre><code>withTargetPortal(targetPortal)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesiscsisecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesiscsisecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.iscsi.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesnfs","title":"obj spec.override.statefulSet.spec.template.spec.volumes.nfs","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesnfswithserver","title":"fn spec.override.statefulSet.spec.template.spec.volumes.nfs.withServer","text":"<pre><code>withServer(server)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaim","title":"obj spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithclaimname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withClaimName","text":"<pre><code>withClaimName(claimName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumespersistentvolumeclaimwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.persistentVolumeClaim.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdisk","title":"obj spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesphotonpersistentdiskwithpdid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.photonPersistentDisk.withPdID","text":"<pre><code>withPdID(pdID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesportworxvolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.portworxVolume","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesportworxvolumewithvolumeid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.portworxVolume.withVolumeID","text":"<pre><code>withVolumeID(volumeID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojected","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsources","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSources","text":"<pre><code>withSources(sources)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedwithsourcesmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.withSourcesMixin","text":"<pre><code>withSourcesMixin(sources)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsources","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmap","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesconfigmapitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.configMap.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapi","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithapiversion","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsfieldrefwithfieldpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.fieldRef.withFieldPath","text":"<pre><code>withFieldPath(fieldPath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithcontainername","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withContainerName","text":"<pre><code>withContainerName(containerName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithdivisor","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withDivisor","text":"<pre><code>withDivisor(divisor)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesdownwardapiitemsresourcefieldrefwithresource","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.downwardAPI.items.resourceFieldRef.withResource","text":"<pre><code>withResource(resource)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttoken","title":"obj spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithaudience","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withAudience","text":"<pre><code>withAudience(audience)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithexpirationseconds","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withExpirationSeconds","text":"<pre><code>withExpirationSeconds(expirationSeconds)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesprojectedsourcesserviceaccounttokenwithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.projected.sources.serviceAccountToken.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesquobyte","title":"obj spec.override.statefulSet.spec.template.spec.volumes.quobyte","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithgroup","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withGroup","text":"<pre><code>withGroup(group)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithregistry","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withRegistry","text":"<pre><code>withRegistry(registry)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithtenant","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withTenant","text":"<pre><code>withTenant(tenant)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesquobytewithvolume","title":"fn spec.override.statefulSet.spec.template.spec.volumes.quobyte.withVolume","text":"<pre><code>withVolume(volume)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbd","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithimage","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withImage","text":"<pre><code>withImage(image)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithkeyring","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withKeyring","text":"<pre><code>withKeyring(keyring)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitors","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitors","text":"<pre><code>withMonitors(monitors)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithmonitorsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withMonitorsMixin","text":"<pre><code>withMonitorsMixin(monitors)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithpool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withPool","text":"<pre><code>withPool(pool)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdwithuser","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.withUser","text":"<pre><code>withUser(user)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesrbdsecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesrbdsecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.rbd.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleio","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithgateway","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withGateway","text":"<pre><code>withGateway(gateway)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithprotectiondomain","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withProtectionDomain","text":"<pre><code>withProtectionDomain(protectionDomain)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsslenabled","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSslEnabled","text":"<pre><code>withSslEnabled(sslEnabled)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragemode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStorageMode","text":"<pre><code>withStorageMode(storageMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithstoragepool","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withStoragePool","text":"<pre><code>withStoragePool(storagePool)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithsystem","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withSystem","text":"<pre><code>withSystem(system)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiowithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesscaleiosecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesscaleiosecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.scaleIO.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecret","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithdefaultmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withDefaultMode","text":"<pre><code>withDefaultMode(defaultMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitems","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItems","text":"<pre><code>withItems(items)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithitemsmixin","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withItemsMixin","text":"<pre><code>withItemsMixin(items)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithoptional","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withOptional","text":"<pre><code>withOptional(optional)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretwithsecretname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumessecretitems","title":"obj spec.override.statefulSet.spec.template.spec.volumes.secret.items","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithkey","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithmode","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withMode","text":"<pre><code>withMode(mode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumessecretitemswithpath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.secret.items.withPath","text":"<pre><code>withPath(path)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageos","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithreadonly","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withReadOnly","text":"<pre><code>withReadOnly(readOnly)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumename","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageoswithvolumenamespace","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.withVolumeNamespace","text":"<pre><code>withVolumeNamespace(volumeNamespace)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesstorageossecretref","title":"obj spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesstorageossecretrefwithname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.storageos.secretRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspectemplatespecvolumesvspherevolume","title":"obj spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithfstype","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withFsType","text":"<pre><code>withFsType(fsType)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyid","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyID","text":"<pre><code>withStoragePolicyID(storagePolicyID)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithstoragepolicyname","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withStoragePolicyName","text":"<pre><code>withStoragePolicyName(storagePolicyName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspectemplatespecvolumesvspherevolumewithvolumepath","title":"fn spec.override.statefulSet.spec.template.spec.volumes.vsphereVolume.withVolumePath","text":"<pre><code>withVolumePath(volumePath)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategy","title":"obj spec.override.statefulSet.spec.updateStrategy","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategywithtype","title":"fn spec.override.statefulSet.spec.updateStrategy.withType","text":"<pre><code>withType(type)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecupdatestrategyrollingupdate","title":"obj spec.override.statefulSet.spec.updateStrategy.rollingUpdate","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategyrollingupdatewithmaxunavailable","title":"fn spec.override.statefulSet.spec.updateStrategy.rollingUpdate.withMaxUnavailable","text":"<pre><code>withMaxUnavailable(maxUnavailable)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecupdatestrategyrollingupdatewithpartition","title":"fn spec.override.statefulSet.spec.updateStrategy.rollingUpdate.withPartition","text":"<pre><code>withPartition(partition)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplates","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithapiversion","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withApiVersion","text":"<pre><code>withApiVersion(apiVersion)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplateswithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesmetadata","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.metadata","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotations","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithannotationsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabels","text":"<pre><code>withLabels(labels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withLabelsMixin","text":"<pre><code>withLabelsMixin(labels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesmetadatawithnamespace","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.metadata.withNamespace","text":"<pre><code>withNamespace(namespace)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspec","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodes","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModes","text":"<pre><code>withAccessModes(accessModes)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithaccessmodesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withAccessModesMixin","text":"<pre><code>withAccessModesMixin(accessModes)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithstorageclassname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumemode","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeMode","text":"<pre><code>withVolumeMode(volumeMode)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecwithvolumename","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.withVolumeName","text":"<pre><code>withVolumeName(volumeName)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasource","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithapigroup","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcewithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSource.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourceref","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithapigroup","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withApiGroup","text":"<pre><code>withApiGroup(apiGroup)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithkind","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withKind","text":"<pre><code>withKind(kind)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecdatasourcerefwithname","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.dataSourceRef.withName","text":"<pre><code>withName(name)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecresources","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimits","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithlimitsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequests","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecresourceswithrequestsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselector","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressions","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressions","text":"<pre><code>withMatchExpressions(matchExpressions)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchexpressionsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchExpressionsMixin","text":"<pre><code>withMatchExpressionsMixin(matchExpressions)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabels","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabels","text":"<pre><code>withMatchLabels(matchLabels)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectorwithmatchlabelsmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.withMatchLabelsMixin","text":"<pre><code>withMatchLabelsMixin(matchLabels)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressions","title":"obj spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithkey","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withKey","text":"<pre><code>withKey(key)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithoperator","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvalues","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValues","text":"<pre><code>withValues(values)\n</code></pre>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specoverridestatefulsetspecvolumeclaimtemplatesspecselectormatchexpressionswithvaluesmixin","title":"fn spec.override.statefulSet.spec.volumeClaimTemplates.spec.selector.matchExpressions.withValuesMixin","text":"<pre><code>withValuesMixin(values)\n</code></pre> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specpersistence","title":"obj spec.persistence","text":"<p>\"The desired persistent storage configuration for each Pod in the cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorage","title":"fn spec.persistence.withStorage","text":"<pre><code>withStorage(storage)\n</code></pre> <p>\"The requested size of the persistent volume attached to each Pod in the RabbitmqCluster. The format of this field matches that defined by kubernetes/apimachinery. See https://pkg.go.dev/k8s.io/apimachinery/pkg/api/resource#Quantity for more info on the format of this field.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specpersistencewithstorageclassname","title":"fn spec.persistence.withStorageClassName","text":"<pre><code>withStorageClassName(storageClassName)\n</code></pre> <p>\"The name of the StorageClass to claim a PersistentVolume from.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specrabbitmq","title":"obj spec.rabbitmq","text":"<p>\"Configuration options for RabbitMQ Pods created in the cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalconfig","title":"fn spec.rabbitmq.withAdditionalConfig","text":"<pre><code>withAdditionalConfig(additionalConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq.conf file in addition to default configurations set by the operator. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on this config, see https://www.rabbitmq.com/configure.html#config-file\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalplugins","title":"fn spec.rabbitmq.withAdditionalPlugins","text":"<pre><code>withAdditionalPlugins(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadditionalpluginsmixin","title":"fn spec.rabbitmq.withAdditionalPluginsMixin","text":"<pre><code>withAdditionalPluginsMixin(additionalPlugins)\n</code></pre> <p>\"List of plugins to enable in addition to essential plugins: rabbitmq_management, rabbitmq_prometheus, and rabbitmq_peer_discovery_k8s.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithadvancedconfig","title":"fn spec.rabbitmq.withAdvancedConfig","text":"<pre><code>withAdvancedConfig(advancedConfig)\n</code></pre> <p>\"Specify any rabbitmq advanced.config configurations to apply to the cluster. For more information on advanced config, see https://www.rabbitmq.com/configure.html#advanced-config-file\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specrabbitmqwithenvconfig","title":"fn spec.rabbitmq.withEnvConfig","text":"<pre><code>withEnvConfig(envConfig)\n</code></pre> <p>\"Modify to add to the rabbitmq-env.conf file. Modifying this property on an existing RabbitmqCluster will trigger a StatefulSet rolling restart and will cause rabbitmq downtime. For more information on env config, see https://www.rabbitmq.com/man/rabbitmq-env.conf.5.html\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specresources","title":"obj spec.resources","text":"<p>\"The desired compute resource requirements of Pods in the cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimits","title":"fn spec.resources.withLimits","text":"<pre><code>withLimits(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithlimitsmixin","title":"fn spec.resources.withLimitsMixin","text":"<pre><code>withLimitsMixin(limits)\n</code></pre> <p>\"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequests","title":"fn spec.resources.withRequests","text":"<pre><code>withRequests(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specresourceswithrequestsmixin","title":"fn spec.resources.withRequestsMixin","text":"<pre><code>withRequestsMixin(requests)\n</code></pre> <p>\"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackend","title":"obj spec.secretBackend","text":"<p>\"Secret backend configuration for the RabbitmqCluster. Enables to fetch default user credentials and certificates from K8s external secret stores.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackendexternalsecret","title":"obj spec.secretBackend.externalSecret","text":"<p>\"LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendexternalsecretwithname","title":"fn spec.secretBackend.externalSecret.withName","text":"<pre><code>withName(name)\n</code></pre> <p>\"Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackendvault","title":"obj spec.secretBackend.vault","text":"<p>\"VaultSpec will add Vault annotations (see https://www.vaultproject.io/docs/platform/k8s/injector/annotations) to RabbitMQ Pods. It requires a Vault Agent Sidecar Injector (https://www.vaultproject.io/docs/platform/k8s/injector) to be installed in the K8s cluster. The injector is a K8s Mutation Webhook Controller that alters RabbitMQ Pod specifications (based on the added Vault annotations) to include Vault Agent containers that render Vault secrets to the volume.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithannotations","title":"fn spec.secretBackend.vault.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Vault annotations that override the Vault annotations set by the cluster-operator. For a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithannotationsmixin","title":"fn spec.secretBackend.vault.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Vault annotations that override the Vault annotations set by the cluster-operator. For a list of valid Vault annotations, see https://www.vaultproject.io/docs/platform/k8s/injector/annotations\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithdefaultuserpath","title":"fn spec.secretBackend.vault.withDefaultUserPath","text":"<pre><code>withDefaultUserPath(defaultUserPath)\n</code></pre> <p>\"Path in Vault to access a KV (Key-Value) secret with the fields username and password for the default user. For example \\\"secret/data/rabbitmq/config\\\".\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithdefaultuserupdaterimage","title":"fn spec.secretBackend.vault.withDefaultUserUpdaterImage","text":"<pre><code>withDefaultUserUpdaterImage(defaultUserUpdaterImage)\n</code></pre> <p>\"Sidecar container that updates the default user's password in RabbitMQ when it changes in Vault. Additionally, it updates /var/lib/rabbitmq/.rabbitmqadmin.conf (used by rabbitmqadmin CLI). Set to empty string to disable the sidecar container.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaultwithrole","title":"fn spec.secretBackend.vault.withRole","text":"<pre><code>withRole(role)\n</code></pre> <p>\"Role in Vault. If vault.defaultUserPath is set, this role must have capability to read the pre-created default user credential in Vault. If vault.tls is set, this role must have capability to create and update certificates in the Vault PKI engine for the domains \\\"\\\" and \\\".svc\\\".\""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specsecretbackendvaulttls","title":"obj spec.secretBackend.vault.tls","text":""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithaltnames","title":"fn spec.secretBackend.vault.tls.withAltNames","text":"<pre><code>withAltNames(altNames)\n</code></pre> <p>\"Specifies the requested Subject Alternative Names (SANs), in a comma-delimited list. These will be appended to the SANs added by the cluster-operator. The cluster-operator will add SANs: \\\"-server-.-nodes.\\\" for each pod, e.g. \\\"myrabbit-server-0.myrabbit-nodes.default\\\".\""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithcommonname","title":"fn spec.secretBackend.vault.tls.withCommonName","text":"<pre><code>withCommonName(commonName)\n</code></pre> <p>\"Specifies the requested certificate Common Name (CN). Defaults to ..svc if not provided.\""},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithipsans","title":"fn spec.secretBackend.vault.tls.withIpSans","text":"<pre><code>withIpSans(ipSans)\n</code></pre> <p>\"Specifies the requested IP Subject Alternative Names, in a comma-delimited list.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specsecretbackendvaulttlswithpkiissuerpath","title":"fn spec.secretBackend.vault.tls.withPkiIssuerPath","text":"<pre><code>withPkiIssuerPath(pkiIssuerPath)\n</code></pre> <p>\"Path in Vault PKI engine. For example \\\"pki/issue/hashicorp-com\\\". required\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-specservice","title":"obj spec.service","text":"<p>\"The desired state of the Kubernetes Service to create for the cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotations","title":"fn spec.service.withAnnotations","text":"<pre><code>withAnnotations(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithannotationsmixin","title":"fn spec.service.withAnnotationsMixin","text":"<pre><code>withAnnotationsMixin(annotations)\n</code></pre> <p>\"Annotations to add to the Service.\"</p> <p>Note: This function appends passed data to existing values</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-specservicewithtype","title":"fn spec.service.withType","text":"<pre><code>withType(type)\n</code></pre> <p>\"Type of Service to create for the cluster. Must be one of: ClusterIP, LoadBalancer, NodePort. For more info see https://pkg.go.dev/k8s.io/api/core/v1#ServiceType\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectls","title":"obj spec.tls","text":"<p>\"TLS-related configuration for the RabbitMQ cluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithcasecretname","title":"fn spec.tls.withCaSecretName","text":"<pre><code>withCaSecretName(caSecretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the Certificate Authority's public certificate for TLS. The Secret must store this as ca.crt. This Secret can be created by running <code>kubectl create secret generic ca-secret --from-file=ca.crt=path/to/ca.cert</code> Used for mTLS, and TLS for rabbitmq_web_stomp and rabbitmq_web_mqtt.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithdisablenontlslisteners","title":"fn spec.tls.withDisableNonTLSListeners","text":"<pre><code>withDisableNonTLSListeners(disableNonTLSListeners)\n</code></pre> <p>\"When set to true, the RabbitmqCluster disables non-TLS listeners for RabbitMQ, management plugin and for any enabled plugins in the following list: stomp, mqtt, web_stomp, web_mqtt. Only TLS-enabled clients will be able to connect.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectlswithsecretname","title":"fn spec.tls.withSecretName","text":"<pre><code>withSecretName(secretName)\n</code></pre> <p>\"Name of a Secret in the same Namespace as the RabbitmqCluster, containing the server's private key &amp; public certificate for TLS. The Secret must store these as tls.key and tls.crt, respectively. This Secret can be created by running <code>kubectl create secret tls tls-secret --cert=path/to/tls.cert --key=path/to/tls.key</code>\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#obj-spectolerations","title":"obj spec.tolerations","text":"<p>\"Tolerations is the list of Toleration resources attached to each Pod in the RabbitmqCluster.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswitheffect","title":"fn spec.tolerations.withEffect","text":"<pre><code>withEffect(effect)\n</code></pre> <p>\"Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithkey","title":"fn spec.tolerations.withKey","text":"<pre><code>withKey(key)\n</code></pre> <p>\"Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithoperator","title":"fn spec.tolerations.withOperator","text":"<pre><code>withOperator(operator)\n</code></pre> <p>\"Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithtolerationseconds","title":"fn spec.tolerations.withTolerationSeconds","text":"<pre><code>withTolerationSeconds(tolerationSeconds)\n</code></pre> <p>\"TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.\"</p>"},{"location":"2.1/rabbitmq/v1beta1/rabbitmqCluster/#fn-spectolerationswithvalue","title":"fn spec.tolerations.withValue","text":"<pre><code>withValue(value)\n</code></pre> <p>\"Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.\"</p>"}]}